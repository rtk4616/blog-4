{"id":"angular-tutorial-applying-animations","title":"Angular 教程：添加动画","date":"2015-12-29T16:00:39.000Z","categories":["JavaScript"],"tags":["AngularJs","Animation"],"html":"<p>在这最后一步中，我们将通过在模板代码中添加一些CSS以及JavaScript动画来让Web应用看起来更酷炫一点。</p>\n<ul>\n<li>我们通过使用<code>ngAnimate</code>模块来在应用程序中启用动画</li>\n<li>我们也会使用一些通用的<code>ng</code>指令来自动配置动画的切入时机</li>\n<li>在注册了动画效果后，标准的DOM操作将会触发相应的动画（比如说通过<code>ngRepeat</code>插入以及移除节点，或者在<code>ngClass</code>中添加或移除CSS类）</li>\n</ul>\n<p>最重要的改动如下所示。你可以在<a href=\"https://github.com/angular/angular-phonecat/compare/step-11...step-12\" title=\"See diff on Github\">GitHub</a>上查看它与之前的代码有何区别。</p>\n<hr>\n<h2 id=\"\">依赖 <a class=\"header-anchor\" href=\"#\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>动画功能由Angular的<code>ngAnimate</code>模块提供，该模块没有包含在Angular的核心框架中。在此我们还使用了<code>jQuery</code>来做一些额外的JavaScript动画效果。 我们使用<a href=\"http://bower.io/\">Bower</a>来安装客户端的依赖。通过更新 <code>bower.json</code> 配置文件来加入新的依赖项：</p>\n<pre><code>{\n  &quot;name&quot;: &quot;angular-seed&quot;,\n  &quot;description&quot;: &quot;A starter project for AngularJS&quot;,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;homepage&quot;: &quot;https://github.com/angular/angular-seed&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;private&quot;: true,\n  &quot;dependencies&quot;: {\n    &quot;angular&quot;: &quot;1.4.x&quot;,\n    &quot;angular-mocks&quot;: &quot;1.4.x&quot;,\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,\n    &quot;bootstrap&quot;: &quot;~3.1.1&quot;,\n    &quot;angular-route&quot;: &quot;1.4.x&quot;,\n    &quot;angular-resource&quot;: &quot;1.4.x&quot;,\n    &quot;angular-animate&quot;: &quot;1.4.x&quot;\n  }\n}\n</code></pre>\n<ul>\n<li><code>&quot;angular-animate&quot;: &quot;1.4.x&quot;</code>告诉Bower需要安装1.4.x版本的angular-resource组件</li>\n<li><code>&quot;jquery&quot;: &quot;~2.1.1&quot;</code>告诉Bower需要安装2.1.1版本的jQuery，需要注意的是这并不是一个Angular模块，它是标准的jQuery库。我们可以使用Bower来安装各种各样的第三方工具</li>\n</ul>\n<p>我们使用Bower来下载以及安装这些组件，通过执行：</p>\n<pre><code>npm install\n</code></pre>\n<blockquote>\n<p>警告：如果在你上一次运行 npm install 之后Angular发布了新版本的话，在运行 install 的时候可能就会遇到问题（因为angular.js的版本发生了冲突）。解决方法是在执行 install 之前先删除bower_components 目录。</p>\n</blockquote>\n<p> </p>\n<blockquote>\n<p>注意：如果你已经全局安装了bower，你可以使用 install 指令。但在这个项目中我们有预设的 install 指令来完成相同的事</p>\n</blockquote>\n<hr>\n<h2 id=\"nganimate\">ngAnimate的工作机制 <a class=\"header-anchor\" href=\"#nganimate\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>如果想要了解关于AngularJS中动画的运行机制的话，可以先阅读<a href=\"https://docs.angularjs.org/guide/animations\">AngularJS动画指导</a>。</p>\n<hr>\n<h2 id=\"-2\">模板 <a class=\"header-anchor\" href=\"#-2\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>我们需要在HTML模板代码中添加对<code>angular-animate.js</code>文件的依赖。<code>angular-animate.js</code>文件中定义了<code>ngAnimate</code>模块，它的作用是让应用能够注意到一些动画的存在。</p>\n<p><code>app/index.html</code>：</p>\n<pre><code>...\n  &lt;!-- for CSS Transitions and/or Keyframe Animations --&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;css/animations.css&quot;&gt;\n\n  ...\n\n  &lt;!-- jQuery is used for JavaScript animations (include this before angular.js) --&gt;\n  &lt;script src=&quot;bower_components/jquery/dist/jquery.js&quot;&gt;&lt;/script&gt;\n\n  ...\n\n  &lt;!-- required module to enable animation support in AngularJS --&gt;\n  &lt;script src=&quot;bower_components/angular-animate/angular-animate.js&quot;&gt;&lt;/script&gt;\n\n  &lt;!-- for JavaScript Animations --&gt;\n  &lt;script src=&quot;js/animations.js&quot;&gt;&lt;/script&gt;\n\n...\n</code></pre>\n<blockquote>\n<p><strong>重要</strong>：当使用Angular 1.4版本的时候必须确保同时使用的jQuery版本大于或等于2.1；官方不确保jQuery 1.x是被完全支持的。确保在加载所有的AngularJS脚本以前先加载jQuery，反之Angular将不会检测到jQuery的存在，动画效果也就会出现一些问题。</p>\n</blockquote>\n<p>我们现在可以同时在CSS代码（<code>animations.css</code>）以及JavaScript代码（<code>animations.js</code>）中创建动画了。但在这之前，就像使用<code>ngResource</code>，我们先来创建一个依赖于<code>ngAnimate</code>的新模块。</p>\n<hr>\n<h2 id=\"-3\">模块与动画 <a class=\"header-anchor\" href=\"#-3\" aria-hidden=\"true\">&#128279;</a></h2>\n<p><code>app/js/animations.js</code>：</p>\n<pre><code>angular.module('phonecatAnimations', ['ngAnimate']);\n// ...\n// this module will later be used to define animations\n// ...\n\n</code></pre>\n<p>然后我们把它附加到应用中去。</p>\n<p><code>app/js/app.js</code>：</p>\n<pre><code>// ...\nangular.module('phonecatApp', [\n  'ngRoute',\n\n  'phonecatAnimations',\n  'phonecatControllers',\n  'phonecatFilters',\n  'phonecatServices',\n]);\n// ...\n</code></pre>\n<p>现在应用可以检测动画了。我们来做些动画吧！</p>\n<hr>\n<h2 id=\"cssngrepeat\">带有CSS动画的ngRepeat <a class=\"header-anchor\" href=\"#cssngrepeat\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>我们先来给<code>phone-list.html</code>页面中的<code>ngRepeat</code>指令加点CSS动画。首先我们给循环体添加一些额外的CSS类，然后我们就可以把它和我们定义的CSS动画挂上钩了。</p>\n<p><code>app/partials/phone-list.html</code>：</p>\n<pre><code>&lt;!--\n  Let's change the repeater HTML to include a new CSS class\n  which we will later use for animations:\n--&gt;\n&lt;ul class=&quot;phones&quot;&gt;\n  &lt;li ng-repeat=&quot;phone in phones | filter:query | orderBy:orderProp&quot;\n      class=&quot;thumbnail phone-listing&quot;&gt;\n    &lt;a href=&quot;#/phones/{{phone.id}}&quot; class=&quot;thumb&quot;&gt;&lt;img ng-src=&quot;{{phone.imageUrl}}&quot;&gt;&lt;/a&gt;\n    &lt;a href=&quot;#/phones/{{phone.id}}&quot;&gt;{{phone.name}}&lt;/a&gt;\n    &lt;p&gt;{{phone.snippet}}&lt;/p&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>看到我们是怎么给它加上<code>phone-listing</code>CSS类的了吗？在HTML中写这么点代码就完全足够了。 接下来是真正的CSS Transition动画代码。</p>\n<p><code>app/css/animations.css</code>：</p>\n<pre><code>.phone-listing.ng-enter,\n.phone-listing.ng-leave,\n.phone-listing.ng-move {\n  -webkit-transition: 0.5s linear all;\n  -moz-transition: 0.5s linear all;\n  -o-transition: 0.5s linear all;\n  transition: 0.5s linear all;\n}\n\n.phone-listing.ng-enter,\n.phone-listing.ng-move {\n  opacity: 0;\n  height: 0;\n  overflow: hidden;\n}\n\n.phone-listing.ng-move.ng-move-active,\n.phone-listing.ng-enter.ng-enter-active {\n  opacity: 1;\n  height: 120px;\n}\n\n.phone-listing.ng-leave {\n  opacity: 1;\n  overflow: hidden;\n}\n\n.phone-listing.ng-leave.ng-leave-active {\n  opacity: 0;\n  height: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n}\n</code></pre>\n<p>如你所见，<code>phone-listing</code>CSS类用来与一些动画钩子结合使用了。钩子会在动画事件发生时被添加或者删除。</p>\n<ul>\n<li><code>ng-enter</code>类会在新元素添加到列表并且渲染到页面中时触发</li>\n<li><code>ng-move</code>类会在元素在列表中移动时触发</li>\n<li><code>ng-leave</code>类会在元素从列表中移除时触发</li>\n</ul>\n<p>手机列表中的元素会根据传入<code>ng-repeat</code>指令中的数据被添加或者移除。举例说，如果过滤器的值发生了变化，那么这些元素会在列表中动画式的出场或退场。 在这里，重点是要注意到当动画发生时，两组CSS类会被添加到元素上：</p>\n<ol>\n<li><code>starting</code>类意味着动画开始时的样式</li>\n<li><code>active</code>类意味着动画结束时的样式</li>\n</ol>\n<p>starting样式的类名由<code>ng-</code>前缀和当时触发的事件名（比如<code>enter</code>，<code>move</code>或者<code>leave</code>）组成，所以<code>enter</code>事件会与<code>ng-enter</code>类挂钩。 active样式的类名与starting类一模一样，除了<code>-active</code>后缀。这两种CSS命名转换允许开发者构建完整的，从开始到结束的所有动画。</p>\n<p>在上面的例子中，当元素被添加进列表时，它们的高度会从<strong><strong>变成<strong>120</strong>个像素，并且在被移除之前会重新变回</strong></strong>像素。同时它们还有一个不错的淡出淡入效果。所有这些都是由以上的CSS Transition声明来控制的。 虽然绝大多数主流浏览器对CSS Transition和CSS动画都有着不错的支持，但请不要忘记IE爸爸，如果你想要让动画效果可以支持到更老旧一些的浏览器的话，可以考虑使用基于JavaScript的动画，我们会在下面的内容中介绍。</p>\n<hr>\n<h2 id=\"css-keyframengview\">带有CSS Keyframe动画的ngView <a class=\"header-anchor\" href=\"#css-keyframengview\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>接下来我们给<code>ngView</code>在路由转换的时候添加一个动画。 在开始之前，我们给HTML添加一个新的CSS类，就跟刚才所做的一样。这一次我们把它添加到包含<code>ng-view</code>指令的元素中去。为了做到这些，我们对HTML代码做了少许改动，这样我们在视图转换的时候可以有更多的控制权。</p>\n<p><code>app/index.html</code>：</p>\n<pre><code>&lt;div class=&quot;view-container&quot;&gt;\n  &lt;div ng-view class=&quot;view-frame&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>通过这个改动，<code>ng-view</code>指令将被包含在一个拥有<code>view-container</code>CSS类的父节点中。这个CSS类给节点添加了一个<code>position: relative</code>类，因此在动画效果执行时<code>ng-view</code>的位置是通过这个父节点计算得出的。 做完这些工作后，我们就可以给它添加一些CSS动画了。</p>\n<p><code>app/css/animations.css</code>：</p>\n<pre><code>.view-container {\n  position: relative;\n}\n\n.view-frame.ng-enter, .view-frame.ng-leave {\n  background: white;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n}\n\n.view-frame.ng-enter {\n  -webkit-animation: 0.5s fade-in;\n  -moz-animation: 0.5s fade-in;\n  -o-animation: 0.5s fade-in;\n  animation: 0.5s fade-in;\n  z-index: 100;\n}\n\n.view-frame.ng-leave {\n  -webkit-animation: 0.5s fade-out;\n  -moz-animation: 0.5s fade-out;\n  -o-animation: 0.5s fade-out;\n  animation: 0.5s fade-out;\n  z-index:99;\n}\n\n@keyframes fade-in {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n@-moz-keyframes fade-in {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n@-webkit-keyframes fade-in {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes fade-out {\n  from { opacity: 1; }\n  to { opacity: 0; }\n}\n@-moz-keyframes fade-out {\n  from { opacity: 1; }\n  to { opacity: 0; }\n}\n@-webkit-keyframes fade-out {\n  from { opacity: 1; }\n  to { opacity: 0; }\n}\n\n/* don't forget about the vendor-prefixes! */\n</code></pre>\n<p>这些代码中除了页面切换时的淡出淡入效果以外没什么丧心病狂的东西。唯一特别的事情是我们使用了绝对定位来对新页面（由<code>ng-enter</code></p>\n<p>标记）与旧页面（由<code>ng-leave</code></p>\n<p>标记）在交叉动画的过程中进行定位。因此当旧页面即将被移除的时候，在它淡出的同时新页面也将同时在与其相同的顶端位置上淡入。 一旦leave动画结束元素就会被移除，同理一旦enter动画结束<code>ng-enter</code>以及<code>ng-enter-active</code>CSS类也会从元素中被移除，然后它就会由其本身的CSS代码来重新渲染和定位（所以一旦动画结束就不存在有失优雅的绝对定位了）。在路由变化的整个过程中这些都会是非常流畅的，页面将表现得非常自然而不是各种闪现。 添加的CSS代码（start和end类）与给<code>ng-repeat</code>添加的代码非常相似。每次新页面加载完成的时候<code>ng-view</code>都会创建一个自身的副本，下载模板然后追加内容。这么做可以保证所有的视图都包含在一个HTML元素中，于是动画就会变得更容易控制。</p>\n<p>更多的CSS动画请参考<a href=\"http://docs.webplatform.org/wiki/css/properties/animations\">文档</a>。</p>\n<hr>\n<h2 id=\"javascriptngclass\">带JavaScript动画的ngClass <a class=\"header-anchor\" href=\"#javascriptngclass\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>我们来给应用添加另一种动画。打开<code>phone-detail.html</code>页面，我们已经完成了一个不错的图片切换功能。通过点击缩略图我们可以改变显示在详细页面上的大图。但我们要怎么给它加点动画呢？</p>\n<p>首先我们先来思考一下。从根本而言，当点击略缩图时，我们是通过改变大图的状态来反应这一次点击的。在HTML世界中最好的反应状态的方法就是使用CSS类。就像我们之前所做的通过CSS类来定义动画，这次动画将在CSS类本身发生变化时启动。 无论选中的缩略图在何时发生变化都将导致状态的变化，同时我们将给大图添加一个<code>.active</code>CSS类来执行动画效果。 我们先来处理<code>phone-detail.html</code>页面。需要注意的是显示大图的方式已经发生了变化。</p>\n<p><code>app/partials/phone-detail.html</code>：</p>\n<pre><code>&lt;!-- We're only changing the top of the file --&gt;\n&lt;div class=&quot;phone-images&quot;&gt;\n  &lt;img ng-src=&quot;{{img}}&quot;\n       class=&quot;phone&quot;\n       ng-repeat=&quot;img in phone.images&quot;\n       ng-class=&quot;{active:mainImageUrl==img}&quot;&gt;\n&lt;/div&gt;\n\n&lt;h1&gt;{{phone.name}}&lt;/h1&gt;\n\n&lt;p&gt;{{phone.description}}&lt;/p&gt;\n\n&lt;ul class=&quot;phone-thumbs&quot;&gt;\n  &lt;li ng-repeat=&quot;img in phone.images&quot;&gt;\n    &lt;img ng-src=&quot;{{img}}&quot; ng-mouseenter=&quot;setImage(img)&quot;&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>就像略所图一样，我们使用一个循环器来显示了<strong>所有</strong>大图，但我们并不会给它添加任何与循环有关的动画。不同的是我们使用<code>ng-class</code>指令来做了一个判断，当且仅当<code>active</code>类为真时它才会被添加到元素上去，然后元素会显示为可见。除此以外它们就将处于隐藏的状态。对于我们目前的情况来说，总会有一张图片是拥有<code>active</code></p>\n<p>类的，因此任何时候都会有仅有一张图片在视图上是可见的。 当<code>active</code>类被添加到元素上的时候，<code>active-add</code>和<code>active-add-active</code>类会在此之前被AngularJS触发。同理当移除类时，<code>active-remove</code>和<code>active-remove-active</code>类也会在恰当的时机被添加到元素上去。 为了保证手机图片在页面一开始加载的时候能够正确地显示，我们给详细页添加了一些CSS样式。</p>\n<p><code>app/css/app.css</code>：</p>\n<pre><code>.phone-images {\n  background-color: white;\n  width: 450px;\n  height: 450px;\n  overflow: hidden;\n  position: relative;\n  float: left;\n}\n\n...\n\nimg.phone {\n  float: left;\n  margin-right: 3em;\n  margin-bottom: 2em;\n  background-color: white;\n  padding: 2em;\n  height: 400px;\n  width: 400px;\n  display: none;\n}\n\nimg.phone:first-child {\n  display: block;\n  }\n</code></pre>\n<p>你可能会觉得我们要做的不过是创建另一个CSS动画。虽然确实可以这么做，但既然有这么个机会我们就可以学习如何使用JavaScript来编写动画。</p>\n<p><code>app/js/animations.js</code>：</p>\n<pre><code>var phonecatAnimations = angular.module('phonecatAnimations', ['ngAnimate']);\n\nphonecatAnimations.animation('.phone', function() {\n\n  var animateUp = function(element, className, done) {\n    if(className != 'active') {\n      return;\n    }\n    element.css({\n      position: 'absolute',\n      top: 500,\n      left: 0,\n      display: 'block'\n    });\n\n    jQuery(element).animate({\n      top: 0\n    }, done);\n\n    return function(cancel) {\n      if(cancel) {\n        element.stop();\n      }\n    };\n  }\n\n  var animateDown = function(element, className, done) {\n    if(className != 'active') {\n      return;\n    }\n    element.css({\n      position: 'absolute',\n      left: 0,\n      top: 0\n    });\n\n    jQuery(element).animate({\n      top: -500\n    }, done);\n\n    return function(cancel) {\n      if(cancel) {\n        element.stop();\n      }\n    };\n  }\n\n  return {\n    addClass: animateUp,\n    removeClass: animateDown\n  };\n});\n</code></pre>\n<p>注意到我们使用了<a href=\"http://jquery.com/\">jQuery</a>来实现动画效果。Angular并不需要jQuery来完成JavaScript动画，但我们还是用了它，因为如何编写一个JavaScript动画库并不在本教程的范围之内。更多关于<code>jQuery.animate</code>的信息请查看<a href=\"http://api.jquery.com/animate/\">jQuery文档</a>。</p>\n<p><code>addClass</code>和<code>removeClass</code>回调函数会在元素添加或者移除所注册的CSS类（<code>.phone</code>）的时候被调用。当<code>.active</code>类被添加到元素上（通过<code>ng-class</code>指令）的时候，<code>addClass</code>JavaScript回调就会在被当作参数而传入到其中的元素（element上执行。最后一个传入的参数是<code>done</code>回调函数。<code>done</code>函数的目的是可以通过调用它让Angular知道这次JavaScript动画已经执行完了。<code>removeClass</code>回调除了触发的时机不同以外，工作方式和上面一模一样。</p>\n<p>在JavaScript回调内，我们通过操作DOM来创建动画。在上面的代码中我们使用了<code>element.css()</code>和<code>element.animate()</code>来操作DOM，回调函数把新元素放在了距离原位置<strong>500</strong>个像素的地方，然后把旧元素和新元素同时地向上移动<strong>500</strong>个像素。因此这个动画看起来就跟传送带一样。当<code>animate</code>函数完成所有事情以后，它就会调用<code>done</code>方法。 需要注意的是<code>addClass</code>和<code>removeClass</code>都返回了一个函数。这个<strong>可选</strong>函数将在动画被取消（另一个动画发生在同一元素上）时触发，当然也包括动画自然完成的情况。函数将被传入一个布尔类型的参数，开发者可以根据它来判断动画是否被取消了。这个函数可以用来给动画做一些收尾工作。</p>\n<h2 id=\"-4\">总结 <a class=\"header-anchor\" href=\"#-4\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>就这样了！我们在超短的时间内构建了一个Web应用。你可以继续在代码中进行深入的探索，并且使用<code>git checkout</code>随时退回到之前步骤的状态下。</p>\n","full":true}