{"id":"react-native-text-inline-image","title":"React Native Text Inline Image","date":"2018-05-30T02:09:05.427Z","tags":["ReactNative"],"index":false,"draft":false,"html":"<p>原文地址（需科学上网）：<a href=\"https://medium.com/@yloeza/react-native-text-inline-image-6055dabd9399\">medium.com</a></p>\n<p>RN 版本：0.49</p>\n<!-- 「」 -->\n<p>图文混排（在文字中插入图片，并保持正确换行）是客户端普遍的需求，但在 RN 中它有一点问题，具体表现在 Android 平台下图片显得异常的小，并且相同系统不同设备之间的表现也不尽一样，而 ios 则表现正常。</p>\n<!-- more -->\n<p>就像这样：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  Image,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>;\n\n<span class=\"hljs-keyword\">const</span> styles = StyleSheet.create({\n  <span class=\"hljs-attr\">container</span>: {\n    <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">paddingTop</span>: <span class=\"hljs-number\">50</span>,\n    <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">'#f6f7f8'</span>,\n  },\n  <span class=\"hljs-attr\">image</span>: {\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">80</span>,\n    <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">80</span>,\n  },\n  <span class=\"hljs-attr\">text</span>: {\n    <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">'#dcdcde'</span>,\n  },\n});\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">View</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.container}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Text</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.text}</span>&gt;</span>\n          Hello people!\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Image</span>\n            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.image}</span>\n            <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{{uri:</span> '<span class=\"hljs-attr\">http:</span>//<span class=\"hljs-attr\">s3.hilariousgifs.com</span>/<span class=\"hljs-attr\">displeased-cat.jpg</span>'}}\n          /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Text</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">View</span>&gt;</span>\n    );\n  }\n}\n\nAppRegistry.registerComponent('App', () =&gt; App);\n</span></code></pre>\n<p>它在 ios 下看起来是这样的：</p>\n<p><img src=\"https://raw.githubusercontent.com/wxsms/wxsms-img-holder/master/1_yUfZChrLszrpkaRaMX8NRA.png\" alt=\"ios-before\"></p>\n<p>而在 Android 下看起来是这样的：</p>\n<p><img src=\"https://raw.githubusercontent.com/wxsms/wxsms-img-holder/master/1_MWQWRMZEqy8TT_PtCzY30g.png\" alt=\"android-before\"></p>\n<p><strong>可以看到，在 Android 下面这张图异常地小！</strong></p>\n<p>实际上这与设备的像素比（pixel ratio）有关，是现版本 React Native 在渲染文字内联图片时的一个 Bug，为了解决这个问题，我们可以给图片设定一个基于设备像素比的宽高。</p>\n<p>就像这样:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  Image,\n  Platform,\n  PixelRatio,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>;\n\n<span class=\"hljs-keyword\">const</span> width = <span class=\"hljs-number\">80</span> * (Platform.OS === <span class=\"hljs-string\">'ios'</span> ? <span class=\"hljs-number\">1</span> : PixelRatio.get());\n<span class=\"hljs-keyword\">const</span> height = <span class=\"hljs-number\">80</span> * (Platform.OS === <span class=\"hljs-string\">'ios'</span> ? <span class=\"hljs-number\">1</span> : PixelRatio.get());\n\n<span class=\"hljs-keyword\">const</span> styles = StyleSheet.create({\n  <span class=\"hljs-attr\">container</span>: {\n    <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">paddingTop</span>: <span class=\"hljs-number\">50</span>,\n    <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">'#f6f7f8'</span>,\n  },\n  <span class=\"hljs-attr\">image</span>: {\n    <span class=\"hljs-attr\">width</span>: width,\n    <span class=\"hljs-attr\">height</span>: height,\n  },\n  <span class=\"hljs-attr\">text</span>: {\n    <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">'#dcdcde'</span>,\n  },\n});\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">View</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.container}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Text</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.text}</span>&gt;</span>\n          Hello people!\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Image</span>\n            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.image}</span>\n            <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{{uri:</span> '<span class=\"hljs-attr\">http:</span>//<span class=\"hljs-attr\">s3.hilariousgifs.com</span>/<span class=\"hljs-attr\">displeased-cat.jpg</span>'}}\n          /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Text</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">View</span>&gt;</span>\n    );\n  }\n}\n\nAppRegistry.registerComponent('App', () =&gt; App);\n</span></code></pre>\n<p>结果：</p>\n<p><img src=\"https://raw.githubusercontent.com/wxsms/wxsms-img-holder/master/1_-g2_GF-__VQQAprdLAisHA.png\" alt=\"android-after\"></p>\n<p>如此一来，内联图片在 Android 下就能以正常缩放比显示了。</p>\n<p>方便起见，可以将这段逻辑封装到组件中去。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> {\n  StyleSheet,\n  Image,\n  Platform,\n  PixelRatio,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>;\n\n<span class=\"hljs-comment\">// This component fixes a bug in React Native with &lt;Image&gt; component inside of</span>\n<span class=\"hljs-comment\">// &lt;Text&gt; components.</span>\n<span class=\"hljs-keyword\">const</span> InlineImage = <span class=\"hljs-function\">(<span class=\"hljs-params\">props</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> style = props.style;\n  <span class=\"hljs-keyword\">if</span> (style &amp;&amp; Platform.OS !== <span class=\"hljs-string\">'ios'</span>) {\n    <span class=\"hljs-comment\">// Multiply width and height by pixel ratio to fix React Native bug</span>\n    style = <span class=\"hljs-built_in\">Object</span>.assign({}, StyleSheet.flatten(props.style));\n    [<span class=\"hljs-string\">'width'</span>, <span class=\"hljs-string\">'height'</span>].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">propName</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (style[propName]) {\n        style[propName] *= PixelRatio.get();\n      }\n    });\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Image</span>\n      {<span class=\"hljs-attr\">...props</span>}\n      <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{style}</span>\n    /&gt;</span>\n  );\n};\n\n// \"Inherit\" prop types from Image\nInlineImage.propTypes = Image.propTypes;\n\nexport default InlineImage;\n</span></code></pre>\n"}