{"id":"angular-tutorial-routing-and-multiple-views","title":"Angular 教程：多页面与路由","date":"2015-12-28T20:26:38.000Z","categories":["JavaScript"],"tags":["AngularJs","Router"],"html":"<p>在这一步中，你将学习如何使用布局模版以及通过Angular的<code>ngRoute</code>模块来给应用添加路由功能。</p>\n<ul>\n<li>当你现在访问<code>app/index.html</code>的时候页面被重定向到了<code>app/index.html/#/phones</code>，并且手机列表将在此展示</li>\n<li>当你点击其中一条手机链接的时候，浏览器将显示一个手机详细信息页面，同时URL相应地更新</li>\n</ul>\n<p>最重要的改动如下所示。你可以在<a href=\"https://github.com/angular/angular-phonecat/compare/step-6...step-7\" title=\"See diff on Github\">GitHub</a>上查看它与之前的代码有何区别。</p>\n<hr>\n<h2 id=\"\">依赖 <a class=\"header-anchor\" href=\"#\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>这一步中添加的路由功能是由Angular的<code>ngRoute</code>模块提供的，该模块没有包含在Angular框架的核心内容中。 我们使用<a href=\"http://bower.io/\">Bower</a>来安装客户端依赖。更新<code>bower.json</code>配置文件来包含新的依赖：</p>\n<pre><code>{\n  &quot;name&quot;: &quot;angular-phonecat&quot;,\n  &quot;description&quot;: &quot;A starter project for AngularJS&quot;,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;homepage&quot;: &quot;https://github.com/angular/angular-phonecat&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;private&quot;: true,\n  &quot;dependencies&quot;: {\n    &quot;angular&quot;: &quot;1.4.x&quot;,\n    &quot;angular-mocks&quot;: &quot;1.4.x&quot;,\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,\n    &quot;bootstrap&quot;: &quot;~3.1.1&quot;,\n    &quot;angular-route&quot;: &quot;1.4.x&quot;\n  }\n}\n</code></pre>\n<p>新的依赖项<code>&quot;angular-route&quot;: &quot;1.4.x&quot;</code>会告诉Bower去安装1.4.x版本的angular-route组件。我们必须使用Bower来下载以及安装该组件。 如果你已经全局安装了bower，你可以使用<code>bower install</code>指令。但在这个项目中我们有预设的指令来完成相同的事情：</p>\n<pre><code>npm install\n</code></pre>\n<hr>\n<h2 id=\"-2\">多视图，路由以及布局模板 <a class=\"header-anchor\" href=\"#-2\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>我们的应用慢慢地成长并开始变得复杂起来了。在这一步之前，应用提供给用户的只有一个视图（所有手机的列表），并且所有模板代码都在<code>index.html</code>文件中。现在我们将要给应用添加一个显示列表中手机细节的视图。</p>\n<p>为了添加细节视图，我们可以扩展<code>index.html</code>视图以包含新的模板代码，但这么做的话项目很快就会变得异常糟糕。所以我们将要做的是把<code>index.html</code>变成一个“布局模版”。这个模板可以理解为应用程序中所有其它模板的母版，至于其它的“局部模板”则将根据当前的“路由”（当前展示给用户的视图）选择性地加载到母版中来。</p>\n<p>Angular的应用路由是由<a href=\"https://docs.angularjs.org/api/ngRoute/provider/$routeProvider\">$routeProvider</a>声明的，它是<a href=\"https://docs.angularjs.org/api/ngRoute/service/$route\">$route</a>服务的提供者。这个服务的目的是让控制器，视图模版以及当前浏览器URL地址之间的连接变得更简单一些。我们可以使用这个功能来实现<a href=\"http://en.wikipedia.org/wiki/Deep_linking\">深度链接</a>，从而允许用户使用浏览器的前进后退以及书签等功能。</p>\n<h2 id=\"-3\">依赖注入，注入器和提供者 <a class=\"header-anchor\" href=\"#-3\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>正如我们所知，依赖注入（DI）是AngularJS的核心，所以对其工作原理稍加理解是很有必要的。 在应用程序被引导的时候，Angular会创建一个注入器，它会寻找并且注入所有被应用程序所需求的服务。注入器本身完全不知道诸如<code>$http</code>或者<code>$route</code>的服务具体做了些什么。实际上，在被正确配置之前，注入器甚至不知道这些服务是否存在。 注入器只是按部就班地做了以下事情：</p>\n<ul>\n<li>读取应用所声明的模块</li>\n<li>注册所有在模块声明中定义的提供者（Provider）</li>\n<li>当需要的时候，给模块注入指定的函数以及任何需要的依赖（服务），它们将被提供者懒加载</li>\n</ul>\n<p>提供者是一个提供（创建）服务实例并且暴露配置接口以控制服务的创建过程与实际行为的对象。对于<code>$route</code>服务而言，<code>$routeProvider</code>暴露的API允许你为自己的应用定义路由。</p>\n<blockquote>\n<p>注意：提供者只能够注入到<code>config</code>函数内。因此你不能给<code>PhoneListCtrl</code>注入<code>$routeProvider</code></p>\n</blockquote>\n<p>Angular模块通过移除应用的全局状态以及提供配置注入器的方法来解决以上问题。与AMD或者require.js截然相反的是，Angular模块并没有尝试去解决脚本加载顺序以及脚本懒加载的问题。这些目标都是完全独立的，同时所有的模块系统都能共存并且实现它们的目标。 查看<a href=\"https://github.com/angular/angular.js/wiki/Understanding-Dependency-Injection\">理解依赖注入</a>来深入了解Angular的DI系统。</p>\n<hr>\n<h2 id=\"-4\">模板 <a class=\"header-anchor\" href=\"#-4\" aria-hidden=\"true\">&#128279;</a></h2>\n<p><code>$route</code>服务通常结合<a href=\"https://docs.angularjs.org/api/ngRoute/directive/ngView\">ngView</a>指令使用。<code>ngView</code>指令的作用是根据当前路由将视图模版加载到布局模板中去。</p>\n<blockquote>\n<p>注意：从Angular 1.2版本开始，<code>ngRoute</code>作为一个独立的模块，必须要额外加载<code>angular-route.js</code>文件，我们刚才已经通过Bower下载了它</p>\n</blockquote>\n<p><code>app/index.html</code>：</p>\n<pre><code>&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot; ng-app=&quot;phonecatApp&quot;&gt;\n&lt;head&gt;\n...\n  &lt;script src=&quot;bower_components/angular/angular.js&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;bower_components/angular-route/angular-route.js&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;js/controllers.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;div ng-view&gt;&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>我们给index模板添加了两个<code>&lt;script&gt;</code>标签来为应用程序加载JavaScript文件：</p>\n<ul>\n<li><code>angular-route.js</code>：定义了Angular的<code>ngRoute</code>模块，它将给我们提供路由功能</li>\n<li><code>app.js</code>：这个文件现在将担任应用的路由模块</li>\n</ul>\n<p>需要注意的是我们把之前<code>index.html</code>模板中的大部分代码都移除了，取而代之的只有一个带有<code>ng-view</code>标签的div元素。移除的代码被移动到了<code>phone-list.html</code>模板中去：</p>\n<p><code>app/partials/phone-list.html</code>：</p>\n<pre><code>&lt;div class=&quot;container-fluid&quot;&gt;\n  &lt;div class=&quot;row&quot;&gt;\n    &lt;div class=&quot;col-md-2&quot;&gt;\n      &lt;!--Sidebar content--&gt;\n\n      Search: &lt;input ng-model=&quot;query&quot;&gt;\n      Sort by:\n      &lt;select ng-model=&quot;orderProp&quot;&gt;\n        &lt;option value=&quot;name&quot;&gt;Alphabetical&lt;/option&gt;\n        &lt;option value=&quot;age&quot;&gt;Newest&lt;/option&gt;\n      &lt;/select&gt;\n\n    &lt;/div&gt;\n    &lt;div class=&quot;col-md-10&quot;&gt;\n      &lt;!--Body content--&gt;\n\n      &lt;ul class=&quot;phones&quot;&gt;\n        &lt;li ng-repeat=&quot;phone in phones | filter:query | orderBy:orderProp&quot; class=&quot;thumbnail&quot;&gt;\n          &lt;a href=&quot;#/phones/{{phone.id}}&quot; class=&quot;thumb&quot;&gt;&lt;img ng-src=&quot;{{phone.imageUrl}}&quot;&gt;&lt;/a&gt;\n          &lt;a href=&quot;#/phones/{{phone.id}}&quot;&gt;{{phone.name}}&lt;/a&gt;\n          &lt;p&gt;{{phone.snippet}}&lt;/p&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>同时我们给手机详细视图临时添加了一个简单的模板：</p>\n<p><code>app/partials/phone-detail.html</code>：</p>\n<pre><code>TBD: detail view for &lt;span&gt;{{phoneId}}&lt;/span&gt;\n</code></pre>\n<p>需要注意的是我们使用了<code>phoneId</code>表达式，这将在<code>PhoneDetailCtrl</code>中定义。</p>\n<hr>\n<h2 id=\"app\">App模块 <a class=\"header-anchor\" href=\"#app\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>为了完善应用程序的架构，我们使用了<code>ngRoute</code>模块，并且将控制器都移动到了它们自己所属的模块<code>phonecatControllers</code>内（如下所示）。 我们给<code>index.html</code>添加了一个<code>angular-route.js</code>引用，同时在<code>controllers.js</code> 中创建了一个新的<code>phonecatControllers</code> 模块。但我们所要做的将不仅限于此。我们需要给应用添加模块依赖。通过在phonecatApp中列出这两个模块作为依赖，我们就可以使用它们提供的指令和服务了。</p>\n<p><code>app/js/app.js</code>：</p>\n<pre><code>var phonecatApp = angular.module('phonecatApp', [\n  'ngRoute',\n  'phonecatControllers'\n]);\n\n...\n</code></pre>\n<p>注意传入到<code>angular.module</code>方法中的第二个参数<code>['ngRoute', 'phonecatControllers']</code>，这个数组中列出的是<code>phonecatApp</code>将要依赖到的模块。</p>\n<pre><code>...\n\nphonecatApp.config(['$routeProvider',\n  function($routeProvider) {\n    $routeProvider.\n      when('/phones', {\n        templateUrl: 'partials/phone-list.html',\n        controller: 'PhoneListCtrl'\n      }).\n      when('/phones/:phoneId', {\n        templateUrl: 'partials/phone-detail.html',\n        controller: 'PhoneDetailCtrl'\n      }).\n      otherwise({\n        redirectTo: '/phones'\n      });\n  }]);\n</code></pre>\n<p>在<code>phonecatApp.config()</code>方法中，我们请求给配置方法注入<code>$routeProvider</code>，并使用<code>$routeProvider.when()</code>方法来定义我们的路由。 我们的应用路由定义如下：</p>\n<ul>\n<li><code>when('/phones')</code>：当URL匹配到<code>/phones</code>时，页面将会显示手机列表视图。Angular会使用<code>phone-list.html</code>模板和<code>PhoneListCtrl</code>控制器来构造这个它</li>\n<li><code>when('/phones/:phoneId')</code>：当URL匹配到<code>/phones/:phoneId</code>（<code>:phoneId</code>是URL的一个参数）时，页面将会显示手机详细视图。 Angular会使用<code>phone-detail.html</code>模板和<code>PhoneDetailCtrl</code>来构造它</li>\n<li><code>otherwise({redirectTo: '/phones'})</code>：当浏览器地址没有匹配上我们定义的路由时重定向到<code>/phones</code></li>\n</ul>\n<p>我们复用了在前面的教程中构建的<code>PhoneListCtrl</code>控制器，并且在<code>app/js/controllers.js</code>文件中为手机详细视图创建了一个空白的<code>PhoneDetailCtrl</code>控制器。 注意在第二条路由定义中使用到的<code>:phoneId</code>参数。<code>$route</code>服务会将<code>/phones/:phoneId</code>声明当成一个模板来使用。所有使用<code>:</code>前缀声明的变量都会被提取到<code>$routeParams</code>对象中去。</p>\n<hr>\n<h2 id=\"-5\">控制器 <a class=\"header-anchor\" href=\"#-5\" aria-hidden=\"true\">&#128279;</a></h2>\n<p><code>app/js/controllers.js</code>：</p>\n<pre><code>var phonecatControllers = angular.module('phonecatControllers', []);\n\nphonecatControllers.controller('PhoneListCtrl', ['$scope', '$http',\n  function ($scope, $http) {\n    $http.get('phones/phones.json').success(function(data) {\n      $scope.phones = data;\n    });\n\n    $scope.orderProp = 'age';\n  }]);\n\nphonecatControllers.controller('PhoneDetailCtrl', ['$scope', '$routeParams',\n  function($scope, $routeParams) {\n    $scope.phoneId = $routeParams.phoneId;\n  }]);\n</code></pre>\n<p>注意到我们创建了一个名为<code>phonecatControllers</code>的新模块。对一些小型AngularJS应用而言或许一个模块就够用了，但是随着应用的增长，将代码重构到不同的模块中去是非常普遍的做法。对大型应用来说，你很可能会为应用的每一个主要功能都创建不同的模块。 因为我们的教学应用相对来说比较小，所以我们把所有的控制器添加到<code>phonecatControllers</code>模块中就完事了。</p>\n<hr>\n<h2 id=\"-6\">测试 <a class=\"header-anchor\" href=\"#-6\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>为了验证应用的正确性，我们编写了一些端到端测试来验证当URL发生变化时应用是否渲染了正确的视图。</p>\n<pre><code>...\n   it('should redirect index.html to index.html#/phones', function() {\n    browser.get('app/index.html');\n    browser.getLocationAbsUrl().then(function(url) {\n        expect(url).toEqual('/phones');\n      });\n  });\n\n  describe('Phone list view', function() {\n    beforeEach(function() {\n      browser.get('app/index.html#/phones');\n    });\n...\n\n  describe('Phone detail view', function() {\n\n    beforeEach(function() {\n      browser.get('app/index.html#/phones/nexus-s');\n    });\n\n\n    it('should display placeholder page with phoneId', function() {\n      expect(element(by.binding('phoneId')).getText()).toBe('nexus-s');\n    });\n  });\n</code></pre>\n<p>你可以通过执行<code>npm run protractor</code>来观察测试运行</p>\n<h2 id=\"-7\">课外扩展 <a class=\"header-anchor\" href=\"#-7\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>尝试给<code>index.html</code>添加一个<code>{{orderProp}}</code>绑定，你会发现即使正处在手机列表视图中它也没有引发任何改变。这是因为<code>orderProp</code>模型只在<code>PhoneListCtrl</code>管理的作用域中可见。如果你把同样的绑定添加到<code>phone-list.html</code>模板内它就会如预期一般地工作了。</p>\n<h2 id=\"-8\">总结 <a class=\"header-anchor\" href=\"#-8\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>既然已经设置好了路由与手机列表视图，我们就可以准备通过<a href=\"/p/angular-tutorial-more-templating/\">step 8</a>来实现详细视图了。</p>\n","full":true}