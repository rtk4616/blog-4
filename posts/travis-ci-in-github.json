{"id":"travis-ci-in-github","title":"Travis CI in Github","date":"2017-04-12T17:35:00.000Z","categories":["CI"],"tags":["Github","Travis-CI"],"html":"<p>Travis CI 是一款免费的持续集成工具，可以与 Github 无缝集成。能够自动完成项目代码的日常测试、编译、部署等工作。现在，我把它应用到了我的两个项目中。</p>\n<p>首先，要在这个平台上做持续集成的前提是到它上面 <a href=\"https://travis-ci.org/\">https://travis-ci.org/</a> 去注册个账号。实际上直接用 Github 账号进行 OAuth 登录就行了。登录以后可以在首页找到自己的所有仓库，在需要进行持续集成的项目前面的开关打开即可。开启后，Travis CI 会监听项目的代码推送与 PR，当发生改变时会立刻进行相应操作。</p>\n<p>至于具体操作内容，由项目根目录的 <code>.travis.yml</code> 文件决定。这个文件的简单用法由下面两个具体例子来说明。</p>\n<!--more-->\n<h2 id=\"wxsmsgithubio\"><a href=\"http://wxsms.github.io\">wxsms.github.io</a> <a class=\"header-anchor\" href=\"#wxsmsgithubio\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>该项目就是这个博客了。因为它是静态博客，所以代码上线前都要进行一次打包过程，在之前这个工作是手动完成的，主要的流程如下：</p>\n<ol>\n<li>在 <code>src</code> 分支上进行代码编辑，</li>\n<li>在 <code>src</code> 分支上 push</li>\n<li>在 <code>src</code> 分支上运行 <code>npm run post</code> 与 <code>npm run build</code> 分别生成文章与博客代码</li>\n<li>切换到 <code>master</code> 分支，将上一步打包编译出来的东西覆盖到相应目录下</li>\n<li>在 <code>master</code> 分支上 push</li>\n<li>切换回 <code>src</code> 分支</li>\n</ol>\n<p>这些步骤看似简单却又容易出错，每次想要刷博客都必须做这么多事情，烦不胜烦。而且，Github 仓库会因为充斥了无意义的 <code>master</code> 历史记录而变得臃肿与难看。</p>\n<p>现在有了 Travis CI，一切都将变得简单。</p>\n<p><code>.travis.yml</code> 文件内容：</p>\n<pre><code>language: node_js\ncache:\n  directories:\n  - node_modules\nnode_js:\n  - &quot;node&quot;\nscript:\n  - npm run post\n  - npm run build\n  - npm run dist-config\ndeploy:\n  - provider: pages\n    skip_cleanup: true\n    github_token: $GITHUB_TOKEN\n    local_dir: dist\n    target_branch: master\n    on:\n      branch: src\n</code></pre>\n<p>说明：</p>\n<ul>\n<li><code>language</code> 指项目代码的语言，这里使用 <code>node_js</code></li>\n<li><code>cache</code> 是 Travis CI 会缓存的内容，比如一些依赖文件无需每次都完全安装。这里缓存了 <code>npm_modules</code> 这个目录</li>\n<li><code>node_js</code> 这里指定 node 的版本，<code>node</code> 的意思是使用最新版</li>\n<li><code>script</code> 则是 Travis CI 具体会去完成的工作，是有顺序关系的，如果没有指定，则默认是 <code>npm run test</code>，这里依次执行了 3 个脚本：\n<ul>\n<li><code>npm run post</code> 打包文章</li>\n<li><code>npm run build</code> 打包代码</li>\n<li><code>npm run dist-config</code> 生成配置文件以及 Readme 等。前两步显而易见，至于第三步，因为 Travis 部署会是一个 force push 的过程，会删除原有分支上的所有内容，因此需要手动生成 Github 的 <a href=\"http://README.md\">README.md</a> 文件以及 Github Page 的 CNAME 文件。</li>\n</ul>\n</li>\n<li><code>deploy</code> 则是项目在所有脚本执行完成后会进行的部署操作，部署只会在脚本全部执行成功（返回 0）后进行\n<ul>\n<li>这里使用 <code>page</code> 即 Github Page 方式部署。</li>\n<li><code>skip_cleanup</code> 这个参数用来防止 Travis 删除脚本生成的文件（删掉了就没意义了）</li>\n<li><code>github_token</code> 是我们 Github 账号的 Access Token，因为私密原因不能写在代码文件里，因此可以在此写一个变量 <code>$GITHUB_TOKEN</code>，然后在 Travis 相应的仓库设置中添加 <code>GITHUB_TOKEN</code> 环境变量，Travis 会在运行时自动替换</li>\n<li><code>local_dir</code> 是指需要部署的打包出来的目录，设置为 <code>dist</code> 目录</li>\n<li><code>target_branch</code> 即目标分支，Travis 会将为 <code>dist</code> 目录整个部署到 <code>master</code> 分支上去</li>\n<li><code>on</code> 则是附加条件。这里的含义应该是只监听 <code>src</code> 分支上的更改</li>\n</ul>\n</li>\n</ul>\n<p>因此，Travis 可以帮我完成以下工作</p>\n<ul>\n<li>监听 <code>src</code> 分支上的改动</li>\n<li>出现改动时，自动执行所有 build 步骤</li>\n<li>如果 build 成功则将相应文件部署到 <code>master</code> 分支上去</li>\n</ul>\n<p>如此一来，我自己需要做的事情就只剩下简单的两步了：</p>\n<ol>\n<li>在 <code>src</code> 分支上进行代码编辑</li>\n<li>在 <code>src</code> 分支上 push</li>\n</ol>\n<p>在我无需关注发布过程的同时，Travis 还能帮我保持整个代码仓库的整洁（<code>master</code> 分支始终进行的都是 force push，不存在无用的历史记录），简直完美！</p>\n<h2 id=\"uiv\">uiv <a class=\"header-anchor\" href=\"#uiv\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>这个项目其实也差不多，有些许变化：</p>\n<ul>\n<li>脚本变为：\n<ul>\n<li><code>npm run test</code> 执行测试</li>\n<li><code>npm run build</code> 打包代码</li>\n<li><code>npm run build-docs</code> 打包文档</li>\n</ul>\n</li>\n<li>需要将代码部署到 npm，而文档部署到 Github Page</li>\n<li>代码与文档都只在版本发布时（Tagged）才进行部署</li>\n</ul>\n<p><code>.travis.yml</code> 文件内容：</p>\n<pre><code>language: node_js\ncache:\n  directories:\n  - node_modules\nnode_js:\n  - &quot;node&quot;\nscript:\n  - npm run test\n  - npm run build\n  - npm run build-docs\nafter_success: 'npm run coveralls'\n\ndeploy:\n  - provider: npm\n    skip_cleanup: true\n    email: &quot;edisond@qq.com&quot;\n    api_key: $NPM_TOKEN\n    on:\n      tags: true\n      branch: master\n  - provider: pages\n    skip_cleanup: true\n    github_token: $GITHUB_TOKEN\n    local_dir: docs\n    on:\n      tags: true\n      branch: master\n</code></pre>\n<p>这个配置文件多了一些内容：</p>\n<ul>\n<li><code>after_success: 'npm run coveralls'</code> 这个是在所有脚本成功以后执行的，目的是与 Coveralls 集成来在项目仓库上添加测试覆盖率的集成，这个在后面说</li>\n<li><code>deploy</code> 中增加了 <code>npm</code> 一项，配置内容跟 <code>pages</code> 基本一致，其中不同的：\n<ul>\n<li><code>email</code> 是用来发布的 npm 账户邮箱名</li>\n<li><code>api_key</code> 是用来发布的 npm 账户 token，可以在本地 <code>~/.npmrc</code> 文件中找到（前提是本地电脑的 npm 已登录）</li>\n<li><code>on</code> -&gt; <code>tags: true</code> 这个标志是说只在带有标签的 Commit 推送时才进行 deploy</li>\n</ul>\n</li>\n<li>Github Page 的部署配置中也加入了 <code>on</code> -&gt; <code>tags: true</code>，起的是一样的作用。这里的 Github Page 是从 master 分支的 docs 文件夹 deploy 到 gh-pages 分支（gh-pages 是 Github Page 的默认分支，所以不用配置 <code>target_branch</code> 项）</li>\n</ul>\n<p>这样一来，Travis 就可以：</p>\n<ul>\n<li>在日常 push 的时候执行 test and build 脚本，但不发布</li>\n<li>在版本 push 的时候执行 test and build 脚本，全部成功则将内容分别发布到 NPM 与 Github Pages</li>\n</ul>\n<p>完美！</p>\n<h2 id=\"coveralls\">关于 Coveralls <a class=\"header-anchor\" href=\"#coveralls\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>Coveralls <a href=\"https://coveralls.io/\">https://coveralls.io/</a> 是一个将代码测试覆盖率集成到 Github 的工具，在 Travis 的加持下，算是锦上添花的一项。同样，到相应网站注册账号是第一步。</p>\n<p>由于 vue-cli 生成的项目默认已经附带了代码测试覆盖率的检测，我要做的只是把这个结果上传而已。</p>\n<p>步骤：</p>\n<ol>\n<li><code>npm install coveralls --save-dev</code></li>\n<li>将 <code>&quot;coveralls&quot;: &quot;cat test/unit/coverage/lcov.info | ./node_modules/.bin/coveralls&quot;</code> 添加到 npm scripts 中。注意：cat 的路径是随项目不同而改变的</li>\n<li>在 <code>.travis.yml</code> 中添加 <code>after_success: 'npm run coveralls'</code> 配置项</li>\n</ol>\n<p>它可以：</p>\n<ol>\n<li>在测试完成后生成覆盖率文件（这一步 vue-cli 已经做了）</li>\n<li>将文件内容传给 <code>coveralls</code>，这个模块可以将结果从 Travis 上传到 Coveralls 平台</li>\n<li>Github 上会 by commit 地显示测试率是增加还是降低了</li>\n</ol>\n<h2 id=\"\">总结 <a class=\"header-anchor\" href=\"#\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>持续集成的好处无需多言，反正 Travis 就是一个免费的、能与 Github 集成的持续集成工具（实际上其它开源平台也可以，以及可以付费为私有项目提供服务）。简单、易用。</p>\n<p>这些配置看似简单，却花费了我大量时间去摸索。由于只能通过不断推送 commit 的方式来触发 build 并验证配置的正确性，其过程异常繁琐，但是现在看来是十分值得的！</p>\n<p>BTW：测试用的 commit 事后可以用本地 reset 与 force push 干掉。</p>\n"}