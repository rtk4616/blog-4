{"id":"angular-tutorial-angular-templates","title":"Angular 教程：动态模版","date":"2015-12-24T17:30:38.000Z","categories":["JavaScript"],"tags":["AngularJs"],"html":"<p>现在我们可以用 AngularJS 把页面变成动态的了，同时使用一个小测试来验证我们将要添加的代码正确性。 一个应用可以有很多种组织形式，对于 Angular 应用来说，使用 MVC 设计模式来解耦代码应该是比较合适的。接下来我们会使用一小点 Angular/JavaScript 代码来给应用添加模型，视图以及控制器。</p>\n<ul>\n<li>手机设备列表现在是由动态数据生成的了</li>\n</ul>\n<p>最重要的改动如下所示。你可以在 <a href=\"https://github.com/angular/angular-phonecat/compare/step-1...step-2\" title=\"See diff on Github\">GitHub</a> 上查看它与之前的代码有何区别。</p>\n<hr>\n<h2 id=\"\">视图与模板 <a class=\"header-anchor\" href=\"#\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>在 Angular 世界中，<strong>视图</strong>可以理解为<strong>模型</strong>在 HTML **模板 **上的投影。这意味着无论模型在何时发生变化，Angular 都会通过刷新被影响的绑定节点来更新视图。</p>\n<p>视图现在由以下 Angular 模板组成：</p>\n<p><code>app/index.html</code>：</p>\n<pre><code>&lt;html ng-app=&quot;phonecatApp&quot;&gt;\n&lt;head&gt;\n  ...\n  &lt;script src=&quot;bower_components/angular/angular.js&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;js/controllers.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body ng-controller=&quot;PhoneListCtrl&quot;&gt;\n\n  &lt;ul&gt;\n    &lt;li ng-repeat=&quot;phone in phones&quot;&gt;\n      &lt;span&gt;{{phone.name}}&lt;/span&gt;\n      &lt;p&gt;{{phone.snippet}}&lt;/p&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>现在 Hard Code 的手机列表被 <a href=\"https://docs.angularjs.org/api/ng/directive/ngRepeat\">ngRepeat</a> 指令以及两条 <a href=\"https://docs.angularjs.org/guide/expression\">Angular表达式</a> 替代了：</p>\n<ul>\n<li><code>&lt;li&gt;</code>元素中的<code>ng-repeat=&quot;phone in phones&quot;</code>是 Angular 的循环指令。它会告诉 Angular 为 ‘phones’ 中的每个 ‘phone’ 使用<code>&lt;li&gt;</code>元素中的模板来创建一个<code>&lt;li&gt;</code>元素</li>\n<li>被双花括号包围的表达式（<code>{{phone.name}}</code>与<code>{{phone.snippet}}</code>）会被表达式得出的值所替代</li>\n</ul>\n<p>我们给<code>&lt;body&gt;</code>元素添加了一个名叫<code>ng-controller</code>的新指令，这会将<code>PhoneListCtrl</code>控制器关联到<code>&lt;body&gt;</code>节点中，此时：</p>\n<ul>\n<li>双花括号中的表达式（<code>{{phone.name}}</code>与<code>{{phone.snippet}}</code>）将与<code>PhoneListCtrl</code>控制器中建立的模型绑定</li>\n</ul>\n<p>注意：我们使用<code>ng-app=&quot;phonecatApp&quot;</code>指定了一个名为<code>phonecatApp</code>的 <a href=\"https://docs.angularjs.org/api/ng/type/angular.Module\">Angular模块</a>，这个模块中将包含<code>PhoneListCtrl</code>控制器。</p>\n<p><img src=\"https://raw.githubusercontent.com/wxsms/wxsms-img-holder/master/tutorial_02.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"-2\">模型与控制器 <a class=\"header-anchor\" href=\"#-2\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>数据<strong>模型</strong>（一个由对象组成的简单数组）现在在<code>PhoneListCtrl</code><strong>控制器</strong>内被初始化了。<strong>控制器</strong>是一个简单的、带<code>$scope</code>参数的函数构造器。</p>\n<p><code>app/js/controllers.js</code>：</p>\n<pre><code>var phonecatApp = angular.module('phonecatApp', []);\n\nphonecatApp.controller('PhoneListCtrl', function ($scope) {\n  $scope.phones = [\n    {'name': 'Nexus S',\n     'snippet': 'Fast just got faster with Nexus S.'},\n    {'name': 'Motorola XOOM™ with Wi-Fi',\n     'snippet': 'The Next, Next Generation tablet.'},\n    {'name': 'MOTOROLA XOOM™',\n     'snippet': 'The Next, Next Generation tablet.'}\n  ];\n});\n</code></pre>\n<p>在此我们定义了一个名为<code>PhoneListCtrl</code></p>\n<p>的控制器，同时在 Angular 模块中注册它。注意我们在<code>&lt;html&gt;</code></p>\n<p>标签上定义的<code>ng-app</code></p>\n<p>指令现在为这个 Angular 应用指定了引导模块为<code>phonecatApp</code>模块。</p>\n<p>虽然这个控制器此时并没有做什么事情，但是它起着至关重要的作用。这个控制器通过提供数据模型的上下文来允许我们在模型与视图中创建数据绑定。</p>\n<ul>\n<li><code>&lt;body&gt;</code>标签上的 <a href=\"https://docs.angularjs.org/api/ng/directive/ngController\">ngController</a> 指令引用了控制器的名字：<code>PhoneListCtrl</code>（在<code>controllers.js</code>文件中）</li>\n<li><code>PhoneListCtrl</code>将手机数据附加到被注入进来的<code>$scope</code>上。scope 是在应用程序被定义时创建的根作用域的一个后代。这个控制器的作用域对<code>&lt;body ng-controller=&quot;PhoneListCtrl&quot;&gt;</code>标签内的所有绑定都是有效的。</li>\n</ul>\n<h3 id=\"-3\">作用域 <a class=\"header-anchor\" href=\"#-3\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>在 Angular 中作用域的概念很关键。</p>\n<p>作用域可以视为使模板，模型以及控制器在一起工作的粘合剂。Angular 使用作用域以及模板，模型，控制器中所包含的信息来保持模型与视图的分离与同步。任何对模型的改动都会反映到视图上；任何对视图的改变也会反映到模型上。 通过 <a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope\">Angular作用域文档</a> 来学习更多关于作用域的知识。</p>\n<hr>\n<h2 id=\"-4\">测试 <a class=\"header-anchor\" href=\"#-4\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>Angular 分离控制器与视图的方式使得测试代码将更容易编写。如果控制器是可以通过全局命名空间访问的，我们就可以简单地使用一个<code>scope</code>演员对象来实例化它：</p>\n<pre><code>describe('PhoneListCtrl', function(){\n\n  it('should create &quot;phones&quot; model with 3 phones', function() {\n    var scope = {},\n        ctrl = new PhoneListCtrl(scope);\n\n    expect(scope.phones.length).toBe(3);\n  });\n\n});\n</code></pre>\n<p>这个测试实例化了<code>PhoneListCtrl</code>，并且通过验证作用域中包含 3 条记录来验证了手机数组的正确性。代码十分简洁。</p>\n<h3 id=\"-5\">测试非全局的控制器 <a class=\"header-anchor\" href=\"#-5\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>一般来说，没有人会想要把控制器直接挂载到全局命名空间上。</p>\n<p>实际上你可以看到我们把通过使用一个匿名函数构造器把它注册在了<code>phonecatApp</code>模块下。 在这个例子中，Angular 提供了一个名为<code>$controller</code>的服务，它将为你根据名字获取到相应的控制器。以下是通过<code>$controller</code>完成的与之前相同的测试：</p>\n<p><code>test/unit/controllersSpec.js</code>：</p>\n<pre><code>describe('PhoneListCtrl', function(){\n\n  beforeEach(module('phonecatApp'));\n\n  it('should create &quot;phones&quot; model with 3 phones', inject(function($controller) {\n    var scope = {},\n        ctrl = $controller('PhoneListCtrl', {$scope:scope});\n\n    expect(scope.phones.length).toBe(3);\n  }));\n\n});\n</code></pre>\n<ul>\n<li>在每一次测试之前我们都告诉 Angular 要加载<code>phonecatApp</code>模块</li>\n<li>告诉 Angular 要为测试方法注入<code>$controller</code>服务</li>\n<li>使用<code>$controller</code>来实例化<code>PhoneListCtrl</code></li>\n<li>通过这个实例，我们就可以验证手机数组的正确性了</li>\n</ul>\n<h3 id=\"-6\">编写和执行测试 <a class=\"header-anchor\" href=\"#-6\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>Angular 开发者偏好于使用 Jasmine’s Behavior-driven Development (BDD) 框架来编写测试。虽然 Angular 并没有要求使用 Jasmine，我们还是使用 Jasmine v1.3 来编写了教程中的所有测试。</p>\n<p>你可以从 <a href=\"http://jasmine.github.io/\">Jasmine主页</a> 以及 <a href=\"http://jasmine.github.io/1.3/introduction.html\">Jasmine文档</a> 中学习 Jasmine</p>\n<p>Angular-seed 项目使用 <a href=\"http://karma-runner.github.io/\">Karma</a> 来执行单元测试，你可以通过执行<code>npm install</code>来确保 Karma 以及它所必须的插件都已经被安装。</p>\n<p>使用<code>npm test</code>来执行单元测试并且监听文件的改动：</p>\n<ul>\n<li>Karma 会自动启动新的 Chrome 和 Firefox 浏览器进程，忽略并且让它们在后台运行就好了。Karma 会使用这些浏览器来执行测试</li>\n<li>如果你只安装了 Chrome 或者 Firefox 的其中一款浏览器，请在运行测试前修改 Karma 配置文件。找到<code>test/karma.conf.js</code>，并且修改其中的<code>browsers</code>属性，比如说你只安装了 Chrome：</li>\n</ul>\n<pre><code>...\n  browsers: ['Chrome'],\n  ...\n</code></pre>\n<ul>\n<li>你将在终端中看到类似以下的输出，可以发现测试通过了（或者并没有）：</li>\n</ul>\n<pre><code>info: Karma server started at http://localhost:9876/\n  info (launcher): Starting  browser &quot;Chrome&quot;\n  info (Chrome 22.0): Connected on socket id tPUm9DXcLHtZTKbAEO-n\n  Chrome 22.0: Executed 1 of 1 SUCCESS (0.093 secs / 0.004 secs)\n</code></pre>\n<ul>\n<li>如果想要重新执行一遍测试，只需要修改任意源代码或者<code>test.js</code>文件即可。Karma 会监听到改动然后重新执行测试。这一定很贴心吧~</li>\n</ul>\n<blockquote>\n<p>当 Karma 启动的时候务必不要将浏览器窗口最小化。在一些操作系统中，分配给最小化的浏览器的内存是有限的，这会导致 Karma 的执行速度非常慢。</p>\n</blockquote>\n<h2 id=\"-7\">课外扩展 <a class=\"header-anchor\" href=\"#-7\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>尝试给<code>index.html</code>再添加些绑定，比如说：</p>\n<pre><code>&lt;p&gt;Total number of phones: {{phones.length}}&lt;/p&gt;\n</code></pre>\n<p>在控制器中创建一个新的属性并且将它绑定到模板上，比如说：</p>\n<pre><code>$scope.name = &quot;World&quot;;\n</code></pre>\n<p>然后给<code>index.html</code>添加绑定：</p>\n<pre><code>&lt;p&gt;Hello, {{name}}!&lt;/p&gt;\n</code></pre>\n<p>刷新浏览器，看看它说的是不是“Hello, World!”</p>\n<p>更新单元测试<code>./test/unit/controllersSpec.js</code>来映射上一步的改动，比如说：</p>\n<pre><code>expect(scope.name).toBe('World');\n</code></pre>\n<p>给<code>index.html</code>添加一个循环器来构造一个简单的表格：</p>\n<pre><code>&lt;table&gt;\n  &lt;tr&gt;&lt;th&gt;row number&lt;/th&gt;&lt;/tr&gt;\n  &lt;tr ng-repeat=&quot;i in [0, 1, 2, 3, 4, 5, 6, 7]&quot;&gt;&lt;td&gt;{{i}}&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n<p>现在通过在绑定中给i加1来把表格变成从 1 开始的：</p>\n<pre><code>&lt;table&gt;\n  &lt;tr&gt;&lt;th&gt;row number&lt;/th&gt;&lt;/tr&gt;\n  &lt;tr ng-repeat=&quot;i in [0, 1, 2, 3, 4, 5, 6, 7]&quot;&gt;&lt;td&gt;{{i+1}}&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n<p>附加题：</p>\n<p>尝试使用嵌套的<code>ng-repeat</code>来创建一个 8×8 的表格。</p>\n<p>将<code>expect(scope.phones.length).toBe(3)</code>改成<code>toBe(4)</code>看看单元测试是不是没有通过。</p>\n<h2 id=\"-8\">总结 <a class=\"header-anchor\" href=\"#-8\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>你现在拥有了一个 MVC 构造形态的动态应用了，并且在开发过程中编写了单元测试。现在我们可以通过 <a href=\"/p/angular-tutorial-filtering-repeaters/\">step 3</a> 来学习如何给应用添加关键字搜索功能。</p>\n","full":true}