{"id":"gitlab-ci-setup","title":"Gitlab CI Setup","date":"2018-07-19T06:22:36.993Z","tags":["CI","Gitlab"],"index":false,"draft":false,"html":"<!-- 「」 -->\n<p>Gitlab 有一套内置的 CI 系统，相比集成 Jenkins 来说更加方便一些，用法也稍为简单。以下是搭建过程。</p>\n<p>前置准备：须要准备一台用来跑 CI 任务的机器（可以是 Mac / Linux / Windows 之一）。</p>\n<!-- more -->\n<h2 id=\"gitlab-ciyml\">创建 <code>.gitlab-ci.yml</code> 文件 <a class=\"header-anchor\" href=\"#gitlab-ciyml\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>和 Github CI 一样，Gitlab CI 也使用 <a href=\"https://en.wikipedia.org/wiki/YAML\">YAML</a> 文件来定义项目的整个构建任务。只要在需要集成 CI 的项目根目录下添加这份文件并写入内容，默认情况下 Gitlab 就会为此项目启用构建。</p>\n<p>配置文档：<a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html\">https://docs.gitlab.com/ee/ci/yaml/README.html</a></p>\n<p>一份较为完整的配置文件样例：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-comment\"># 指定 docker 镜像</span>\n<span class=\"hljs-attr\">image:</span> <span class=\"hljs-attr\">node:9.3.0</span>\n\n<span class=\"hljs-comment\"># 为 docker 镜像安装 ssh-agent 以执行部署任务</span>\n<span class=\"hljs-attr\">before_script:</span>\n<span class=\"hljs-bullet\">  -</span> <span class=\"hljs-string\">'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )'</span>\n<span class=\"hljs-bullet\">  -</span> <span class=\"hljs-string\">eval</span> <span class=\"hljs-string\">$(ssh-agent</span> <span class=\"hljs-bullet\">-s)</span>\n<span class=\"hljs-bullet\">  -</span> <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">\"$SSH_PRIVATE_KEY\"</span> <span class=\"hljs-string\">| tr -d '\\r' | ssh-add - &gt; /dev/null\n  - mkdir -p ~/.ssh\n  - echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" &gt; ~/.ssh/config\n  - chmod 700 ~/.ssh\n\n# 定义构建的三个阶段\n</span><span class=\"hljs-attr\">stages:</span>\n<span class=\"hljs-bullet\">  -</span> <span class=\"hljs-string\">build</span>\n<span class=\"hljs-bullet\">  -</span> <span class=\"hljs-string\">test</span>\n<span class=\"hljs-bullet\">  -</span> <span class=\"hljs-string\">deploy</span>\n\n<span class=\"hljs-comment\"># 定义可缓存的文件夹</span>\n<span class=\"hljs-attr\">cache:</span>\n<span class=\"hljs-attr\">  paths:</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">node_modules/</span>\n\n<span class=\"hljs-comment\"># 构建任务</span>\n<span class=\"hljs-attr\">build-job:</span>\n<span class=\"hljs-attr\">  stage:</span> <span class=\"hljs-string\">build</span>\n<span class=\"hljs-attr\">  script:</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">\"npm install\"</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">\"npm run build\"</span>\n<span class=\"hljs-attr\">  tags:</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">node</span>\n\n<span class=\"hljs-comment\"># 测试任务</span>\n<span class=\"hljs-attr\">test-job:</span>\n<span class=\"hljs-attr\">  stage:</span> <span class=\"hljs-string\">test</span>\n<span class=\"hljs-attr\">  script:</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">\"npm install\"</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">\"npm run lint\"</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">\"npm test\"</span>\n<span class=\"hljs-attr\">  tags:</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">node</span>\n\n<span class=\"hljs-comment\"># 部署任务</span>\n<span class=\"hljs-attr\">deploy-job:</span>\n<span class=\"hljs-attr\">  stage:</span> <span class=\"hljs-string\">deploy</span>\n<span class=\"hljs-attr\">  only:</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">release</span>\n<span class=\"hljs-attr\">  script:</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">\"npm install\"</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">\"npm run build\"</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">ssh</span> <span class=\"hljs-string\">user@host</span> <span class=\"hljs-string\">\"[any shell commands]\"</span>\n<span class=\"hljs-attr\">  tags:</span>\n<span class=\"hljs-bullet\">    -</span> <span class=\"hljs-string\">node</span>\n</code></pre>\n<p>整个构建过程基本上一目了然，比 Jenkins 简便很多。Gitlab CI 会按顺序执行 build / test / deploy 三个 stage 的任务，遇到出错即中止，并不再往下执行。同个 stage 中的多个任务会并发执行。需要注意的是，各个 stage 的工作空间是独立的。</p>\n<p>其中 <code>$SSH_PRIVATE_KEY</code> 是在相应 Gitlab 项目中配置的一个 Secret Value，是构建机的 ssh 私钥。后面再谈。</p>\n<p>将 <code>.gitlab-ci.yml</code> 文件推送到服务器后，打开项目主页，点击 Commit 记录，会发现构建任务启动并处于 pending 状态：</p>\n<p><img src=\"https://docs.gitlab.com/ee/ci/quick_start/img/new_commit.png\" alt=\"img\"></p>\n<p>点击构建图标，则可以进入到 CI 详情页面：</p>\n<p><img src=\"https://docs.gitlab.com/ee/ci/quick_start/img/single_commit_status_pending.png\" alt=\"img\"></p>\n<p>点击具体任务查看 log 则提示项目没有配置相应的 runner 来执行构建任务。也就是下一步要做的事情。</p>\n<h2 id=\"gitlab-runner\">搭建 Gitlab runner <a class=\"header-anchor\" href=\"#gitlab-runner\" aria-hidden=\"true\">&#128279;</a></h2>\n<p><a href=\"https://docs.gitlab.com/runner/\">Gitlab runner</a> 是用来执行 CI 任务的客户端，它可以在一台机器上搭建，并且同时为多个项目服务。<a href=\"https://docs.gitlab.com/runner/install/\">安装教程</a>。</p>\n<p>安装好 runner 后，还要为机器安装 <a href=\"https://www.docker.com/community-edition\">Docker</a>，用来作为具体构建的容器。</p>\n<p>以上均安装完成后，就可以开始配置 runner 了。配置过程中需要用到的一些信息可以在下图位置找到（项目主页 -&gt; Settings -&gt; CI / CD -&gt; Runners settings）。</p>\n<p><img src=\"https://docs.gitlab.com/ee/ci/quick_start/img/runners_activated.png\" alt=\"img\"></p>\n<pre><code>$ sudo gitlab-runner register\n\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )\n(填写上图位置的地址)\n\nPlease enter the gitlab-ci token for this runner\n(填写上图位置的token)\n\nPlease enter the gitlab-ci description for this runner\n[hostame] my-runner\n\nPlease enter the gitlab-ci tags for this runner (comma separated):\nnode\n\nPlease enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:\ndocker\n\nPlease enter the Docker image (eg. ruby:2.1):\nnode:latest\n</code></pre>\n<p>其中 description 与 tags 将来都可以在 Gitlab UI 中更改。注意 tag 必须与 <code>.gitlab-ci.yml</code> 中各个 job 指定的 tag 一致，这个 job 才会分配到这个 runner 上去。</p>\n<p>如此一来则大功告成，回到 Gitlab UI，在 Runner settings 内可以看到配置好的 runner，并且可以执行任务了。</p>\n<p><img src=\"https://docs.gitlab.com/ee/ci/quick_start/img/pipelines_status.png\" alt=\"img\"></p>\n<h2 id=\"\">遇到的问题 <a class=\"header-anchor\" href=\"#\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>其实本地构建基本上都没什么问题，遇到的坑基本集中在 deploy 阶段，即远程到服务器上去发布的这一步。按照 Gitlab 提供的<a href=\"https://docs.gitlab.com/ee/ci/ssh_keys/\">文档</a>，走完了所有的步骤后，构建机总是无法使用 private key 直接登录，而是必须输入密码登录。尝试了查看 ssh 日志，重启服务器 sshd 服务，修改文件夹权限等等，debug 了半天还是没有解决该问题。后来偶然发现在部署服务器上使用 sshd 开启一个新的服务，用新的端口即可顺利登录，也不知道是为什么。</p>\n<p>更新：另外一个方法，可以使用 <code>sshpass</code> 命令来进行登录。用法：</p>\n<ol>\n<li>在 docker 镜像中安装 <code>sshpass</code><pre><code>$ which sshpass || ( apt-get update -y &amp;&amp; apt-get install sshpass -y )\n</code></pre>\n其中 <code>-y</code> 是为了防止安装过程中出现需要选择的项目，一律选 YES</li>\n<li>在项目 CI 变量中设置 ssh 密码</li>\n<li>使用 <code>sshpass</code> 复制文件，或登录远程服务器<pre><code># scp\n$ SSHPASS=$YOUR_PASSWORD_VAR sshpass -e scp -r local_folder user@host:remote_folder&quot;\n# ssh\n$ SSHPASS=$YOUR_PASSWORD_VAR sshpass -e ssh user@host\n</code></pre>\n</li>\n</ol>\n"}