{"id":"angular-tutorial-rest-and-custom-services","title":"Angular 教程：REST 和自定义服务","date":"2015-12-29T14:01:43.000Z","categories":["JavaScript"],"tags":["AngularJs","RESTful"],"html":"<p>在这一步中，应用程序抓取数据的方式将会改变。</p>\n<ul>\n<li>我们定义了一个代表着<a href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer\">RESTful</a>客户端的自定义服务。通过这个客户端我们可以用更简洁的方式向服务器发起数据请求，不再与低层次的<a href=\"https://docs.angularjs.org/api/ng/service/$http\">$http</a>接口，HTTP方法与URL等打交道</li>\n</ul>\n<p>最重要的改动如下所示。你可以在<a href=\"https://github.com/angular/angular-phonecat/compare/step-10...step-11\" title=\"See diff on Github\">GitHub</a>上查看它与之前的代码有何区别。</p>\n<hr>\n<h2 id=\"\">依赖 <a class=\"header-anchor\" href=\"#\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>RESTful功能由Angular的<code>ngResource</code>模块提供，该模块没有包含在Angular的核心框架中。 我们使用<a href=\"http://bower.io/\">Bower</a>来安装客户端的依赖。通过更新<code>bower.json</code>配置文件来加入新的依赖项：</p>\n<pre><code>{\n  &quot;name&quot;: &quot;angular-seed&quot;,\n  &quot;description&quot;: &quot;A starter project for AngularJS&quot;,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;homepage&quot;: &quot;https://github.com/angular/angular-seed&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;private&quot;: true,\n  &quot;dependencies&quot;: {\n    &quot;angular&quot;: &quot;1.4.x&quot;,\n    &quot;angular-mocks&quot;: &quot;1.4.x&quot;,\n    &quot;jquery&quot;: &quot;~2.1.1&quot;,\n    &quot;bootstrap&quot;: &quot;~3.1.1&quot;,\n    &quot;angular-route&quot;: &quot;1.4.x&quot;,\n    &quot;angular-resource&quot;: &quot;1.4.x&quot;\n  }\n}\n</code></pre>\n<p>新的依赖项<code>&quot;angular-resource&quot;: &quot;1.4.x&quot;</code>告诉Bower需要安装1.4.x版本的angular-resource组件。通过以下命令下载并安装依赖：</p>\n<pre><code>npm install\n</code></pre>\n<blockquote>\n<p>警告：如果在你上一次运行<code>npm install</code>之后Angular发布了新版本的话，在运行<code>bower install</code>的时候可能就会遇到问题（因为angular.js的版本发生了冲突）。解决方法是在执行<code>npm install</code>之前先删除<code>app/bower_components</code>目录。</p>\n</blockquote>\n<p> </p>\n<blockquote>\n<p>注意：如果你已经全局安装了bower，你可以使用<code>bower install</code>指令。但在这个项目中我们有预设的<code>npm install</code>指令来完成相同的事情</p>\n</blockquote>\n<hr>\n<h2 id=\"-2\">模板 <a class=\"header-anchor\" href=\"#-2\" aria-hidden=\"true\">&#128279;</a></h2>\n<p><code>app/js/services.js</code>文件将包含一些自定义服务的代码，所以我们要把它添加到布局模版中。同时我们也要加载<code>angular-resource.js</code>文件，它包含了ngResource模块。</p>\n<p><code>app/index.html</code>：</p>\n<pre><code>...\n  &lt;script src=&quot;bower_components/angular-resource/angular-resource.js&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;js/services.js&quot;&gt;&lt;/script&gt;\n...\n</code></pre>\n<hr>\n<h2 id=\"-3\">服务 <a class=\"header-anchor\" href=\"#-3\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>我们通过自己创建的服务来与服务器上的手机数据打交道：</p>\n<p><code>app/js/services.js</code>：</p>\n<pre><code>var phonecatServices = angular.module('phonecatServices', ['ngResource']);\n\nphonecatServices.factory('Phone', ['$resource',\n  function($resource){\n    return $resource('phones/:phoneId.json', {}, {\n      query: {method:'GET', params:{phoneId:'phones'}, isArray:true}\n    });\n  }]);\n</code></pre>\n<p>我们通过使用工厂（Factory）方法以及模块（Module）API来注册一个自定义服务。我们给它传递了两个参数：服务名（Phone）以及工厂方法。工厂方法的构造与控制器非常相似，它们都能通过方法参数来接受注入。在这个服务中我们声明了一项对<code>$resource</code>服务的依赖。<code>$resource</code>服务可以让我们使用更少的代码以更简洁的方式来创建RESTful客户端。这个客户端可以取代低层次的<code>$http</code>服务在应用中的作用。</p>\n<p><code>app/js/app.js</code>：</p>\n<pre><code>...\nangular.module('phonecatApp', ['ngRoute', 'phonecatControllers','phonecatFilters', 'phonecatServices']).\n...\n</code></pre>\n<p>我们需要给<code>phonecatApp</code>主模块添加对<code>phonecatServices</code>模块的依赖。</p>\n<hr>\n<h2 id=\"-4\">控制器 <a class=\"header-anchor\" href=\"#-4\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>我们通过使用<code>Phone</code>服务替代低层次的<code>$http</code>服务来简化子控制器（<code>PhoneListCtrl</code>和<code>PhoneDetailCtrl</code>）。对于暴露的RESTful数据资源来说，Angular的<code>$recource</code>服务比<code>$http</code>服务用起来更简单，并且代码也更容易看懂了。</p>\n<p><code>app/js/controllers.js</code>：</p>\n<pre><code>var phonecatControllers = angular.module('phonecatControllers', []);\n\n...\n\nphonecatControllers.controller('PhoneListCtrl', ['$scope', 'Phone', function($scope, Phone) {\n  $scope.phones = Phone.query();\n  $scope.orderProp = 'age';\n}]);\n\nphonecatControllers.controller('PhoneDetailCtrl', ['$scope', '$routeParams', 'Phone', function($scope, $routeParams, Phone) {\n  $scope.phone = Phone.get({phoneId: $routeParams.phoneId}, function(phone) {\n    $scope.mainImageUrl = phone.images[0];\n  });\n\n  $scope.setImage = function(imageUrl) {\n    $scope.mainImageUrl = imageUrl;\n  }\n}]);\n</code></pre>\n<p>注意在<code>PhoneListCtrl</code>中我们使用：</p>\n<pre><code>$scope.phones = Phone.query();\n</code></pre>\n<p>替代了：</p>\n<pre><code>$http.get('phones/phones.json').success(function(data) {\n  $scope.phones = data;\n});\n</code></pre>\n<p>这是一个查询所有手机设备的简写。 这里有一个重点，就是我们在调用Phone服务的时候不会给它传入任何的回调函数。虽然结果看起来像是同步返回的一样，然而并不是。同步返回的实际上不是数据，而是“未来（Future）”——一个在XHR响应返回的时候将会被数据填充的对象。因为Angular的数据绑定特性，我们可以用这个“未来”对象给模板做绑定。那么在数据真正到来的时候，视图也就会自然而然地更新了。 有时候仅仅依靠这个未来的对象并不能完成我们想要的所有工作，因此在本例中，我们还是给它添加了一个回调参数来处理服务器响应。比如<code>PhoneDetailCtrl</code>，我们在回调函数中设置了<code>mainImageUrl</code>的值。</p>\n<hr>\n<h2 id=\"-5\">测试 <a class=\"header-anchor\" href=\"#-5\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>因为我们使用了ngResource模块，所以想要让测试通过的话就必须要更新一下Karma配置文件了：</p>\n<p><code>test/karma.conf.js</code>：</p>\n<pre><code>files : [\n  'app/bower_components/angular/angular.js',\n  'app/bower_components/angular-route/angular-route.js',\n  'app/bower_components/angular-resource/angular-resource.js',\n  'app/bower_components/angular-mocks/angular-mocks.js',\n  'app/js/**/*.js',\n  'test/unit/**/*.js'\n],\n</code></pre>\n<p>我们修改了一下单元测试来验证新服务是否使用了HTTP请求并且是否工作正确。同时测试也会验证控制器与服务之间的连接是否正确。 <a style=\"line-height: 1.5;\" href=\"https://docs.angularjs.org/api/ngResource/service/$resource\">$resource</a>服务自动地给响应体添加了更新以及删除数据的方法。所以如果我们使用标准的<code>toEqual</code>匹配器的话，测试将会失败。这是因为测试数据并没有和响应体完全一模一样。为了解决这个问题，我们使用一个新定义的<code>toEqualData</code><a href=\"http://jasmine.github.io/1.3/introduction.html#section-Matchers\">Jasmine匹配器</a>。<code>toEqualData</code>匹配器在比较两个对象的时候会只比较其属性而忽略对象所携带的方法。</p>\n<p><code>test/unit/controllersSpec.js</code>：</p>\n<pre><code>describe('PhoneCat controllers', function() {\n\n  beforeEach(function(){\n    this.addMatchers({\n      toEqualData: function(expected) {\n        return angular.equals(this.actual, expected);\n      }\n    });\n  });\n\n  beforeEach(module('phonecatApp'));\n  beforeEach(module('phonecatServices'));\n\n\n  describe('PhoneListCtrl', function(){\n    var scope, ctrl, $httpBackend;\n\n    beforeEach(inject(function(_$httpBackend_, $rootScope, $controller) {\n      $httpBackend = _$httpBackend_;\n      $httpBackend.expectGET('phones/phones.json').\n          respond([{name: 'Nexus S'}, {name: 'Motorola DROID'}]);\n\n      scope = $rootScope.$new();\n      ctrl = $controller('PhoneListCtrl', {$scope: scope});\n    }));\n\n\n    it('should create &quot;phones&quot; model with 2 phones fetched from xhr', function() {\n      expect(scope.phones).toEqualData([]);\n      $httpBackend.flush();\n\n      expect(scope.phones).toEqualData(\n          [{name: 'Nexus S'}, {name: 'Motorola DROID'}]);\n    });\n\n\n    it('should set the default value of orderProp model', function() {\n      expect(scope.orderProp).toBe('age');\n    });\n  });\n\n\n  describe('PhoneDetailCtrl', function(){\n    var scope, $httpBackend, ctrl,\n        xyzPhoneData = function() {\n          return {\n            name: 'phone xyz',\n            images: ['image/url1.png', 'image/url2.png']\n          }\n        };\n\n\n    beforeEach(inject(function(_$httpBackend_, $rootScope, $routeParams, $controller) {\n      $httpBackend = _$httpBackend_;\n      $httpBackend.expectGET('phones/xyz.json').respond(xyzPhoneData());\n\n      $routeParams.phoneId = 'xyz';\n      scope = $rootScope.$new();\n      ctrl = $controller('PhoneDetailCtrl', {$scope: scope});\n    }));\n\n\n    it('should fetch phone detail', function() {\n      expect(scope.phone).toEqualData({});\n      $httpBackend.flush();\n\n      expect(scope.phone).toEqualData(xyzPhoneData());\n    });\n  });\n});\n</code></pre>\n<p>现在你应该能在Karma终端内看到以下输出：</p>\n<pre><code>Chrome 22.0: Executed 5 of 5 SUCCESS (0.038 secs / 0.01 secs)\n</code></pre>\n<h2 id=\"-6\">总结 <a class=\"header-anchor\" href=\"#-6\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>现在我们见识了如何构建一个自定义的服务来作为RESTful客户端，下一步<a href=\"/p/angular-tutorial-applying-animations/\">step 12</a>（最后一步）我们将会学习如何让应用程序动起来（加点特效）。</p>\n","full":true}