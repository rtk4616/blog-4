{"id":"d3-note-interpolate","title":"D3 Note - Interpolate","date":"2016-12-05T14:17:00.000Z","categories":["JavaScript"],"tags":["D3"],"html":"<p><code>d3-interpolate</code> 是 D3 的核心模块之一，与比例尺有些类似，<code>interpolate</code> （插值）所做的也是一些数值映射的工作。区别是，<code>interpolate</code> 的定义域始终是 <strong>0 ~ 1</strong>，并且始终为线性的。所以，更多时候它用来与 D3 的一些其他模组集成使用（如 transition, scale 等）。</p>\n<p>举个例子：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">let</span> i = d3.interpolateNumber(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>); <span class=\"hljs-comment\">// 10 as a, and 20 as b</span>\ni(<span class=\"hljs-number\">0.0</span>); <span class=\"hljs-comment\">// 10</span>\ni(<span class=\"hljs-number\">0.2</span>); <span class=\"hljs-comment\">// 12</span>\ni(<span class=\"hljs-number\">0.5</span>); <span class=\"hljs-comment\">// 15</span>\ni(<span class=\"hljs-number\">1.0</span>); <span class=\"hljs-comment\">// 20</span>\n</code></pre>\n<p>返回的函数 <code>i</code> 称作 <code>interpolator</code> （插值器）。给定值域 <strong>a</strong> 与 <strong>b</strong>，并且传入 <strong>[0, 1]</strong> 这个闭区间内的任意值，插值器将返回对应的结果。通常情况下，<strong>a 对应参数 0，b 对应参数 1</strong></p>\n<p>跟比例尺一样，插值器也可以接受其他类型的参数，如：</p>\n<pre><code class=\"language-js\">d3.interpolateLab(<span class=\"hljs-string\">\"steelblue\"</span>, <span class=\"hljs-string\">\"brown\"</span>)(<span class=\"hljs-number\">0.5</span>); <span class=\"hljs-comment\">// \"rgb(142, 92, 109)\"</span>\n</code></pre>\n<p>甚至对象、数组：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">let</span> i = d3.interpolate({<span class=\"hljs-attr\">colors</span>: [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"blue\"</span>]}, {<span class=\"hljs-attr\">colors</span>: [<span class=\"hljs-string\">\"white\"</span>, <span class=\"hljs-string\">\"black\"</span>]});\ni(<span class=\"hljs-number\">0.0</span>); <span class=\"hljs-comment\">// {colors: [\"rgb(255, 0, 0)\", \"rgb(0, 0, 255)\"]}</span>\ni(<span class=\"hljs-number\">0.5</span>); <span class=\"hljs-comment\">// {colors: [\"rgb(255, 128, 128)\", \"rgb(0, 0, 128)\"]}</span>\ni(<span class=\"hljs-number\">1.0</span>); <span class=\"hljs-comment\">// {colors: [\"rgb(255, 255, 255)\", \"rgb(0, 0, 0)\"]}</span>\n</code></pre>\n<h2 id=\"d3interpolate\">d3.interpolate <a class=\"header-anchor\" href=\"#d3interpolate\" aria-hidden=\"true\">&#128279;</a></h2>\n<p><code>interpolate</code> 模块提供了很多子方法，然而，大多数情况下，直接调用这个就足够了。因为 D3 会根据传入的数据类型自动匹配子方法（注意：是基于参数 <strong>b</strong> 的数据类型）。</p>\n<p>决定算法：</p>\n<ol>\n<li>如果 b 是 <code>null</code>, <code>undefined</code> 或 <code>boolean</code>，则函数返回的是常量 b</li>\n<li>如果 b 是数字，则使用 <code>interpolateNumber</code> 方法</li>\n<li>如果 b 是颜色或者可以转换为颜色的字符串，则使用 <code>interpolateRgb</code> 方法</li>\n<li>如果 b 是时间，则使用 <code>interpolateDate</code> 方法</li>\n<li>如果 b 是字符串，则使用 <code>interpolateString</code> 方法</li>\n<li>如果 b 是数组，则使用 <code>interpolateArray</code> 方法</li>\n<li>如果 b 可以强转为数字，则使用 <code>interpolateNumber</code> 方法</li>\n<li>使用 <code>interpolateObject</code> 方法</li>\n<li>基于 b 的类型，将 a 强转为相同类型</li>\n</ol>\n<p>各个方法可以直接查看文档获取用法，大同小异。比较有趣的是 <code>interpolateString</code>，它可以检测字符串中的数字，并且做类似这样的事情：</p>\n<blockquote>\n<p>For example, if a is &quot;300 12px sans-serif&quot;, and b is &quot;500 36px Comic-Sans&quot;, two embedded numbers are found. The remaining static parts of the string are a space between the two numbers (&quot; &quot;), and the suffix (&quot;px Comic-Sans&quot;). The result of the interpolator at t = 0.5 is &quot;400 24px Comic-Sans&quot;.</p>\n</blockquote>\n<p>至于插值函数的用处，比较多，举一个例子：<strong>d3-transition</strong> 有一些平滑动画的实现函数需要用到插值，比如说地球的动画滚动效果：</p>\n<pre><code class=\"language-js\">d3.transition()\n  .duration(<span class=\"hljs-number\">1000</span>)\n  .tween(<span class=\"hljs-string\">'rotate'</span>, () =&gt; {\n    <span class=\"hljs-keyword\">let</span> r = d3.interpolate(projection.rotate(), [-geo[<span class=\"hljs-number\">0</span>], -geo[<span class=\"hljs-number\">1</span>]])\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">t</span>) =&gt;</span> {\n      rotateGlobeByAngle(r(t))\n    }\n  })\n  .on(<span class=\"hljs-string\">'end'</span>, () =&gt; {\n     <span class=\"hljs-comment\">// do something...        </span>\n  })\n</code></pre>\n","full":true}