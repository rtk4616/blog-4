{"id":"wordpress-archives-page-implementation","title":"WordPress 文章归档页面实现","date":"2016-02-02T16:06:16.000Z","categories":["CMS"],"tags":["MySQL","PHP","Wordpress"],"html":"<p>归档页就是一个包含站点所有已发布文章的列表页面，通常默认会根据发布时间来进行排序，然后可能会有一些分页排序页内搜索等功能。实现这个功能可以用Wordpress插件，当然也可以自己写代码，我一开始就是用了一款插件，觉得实现了功能还不错就没管它。后来想要做一些自定义的修改，比如插件是按月份分组然而我想改成年份，就稍微看了看它的代码。一看不得了，莫名地有一种总算见识到了什么叫又烂又臭的代码的感觉涌上心头，做了这么多年伸手党总算是被恶心到了，简直不能忍，于是琢磨着自己写一个简单的模板页，不用它了。</p>\n<!--more-->\n<h2 id=\"\">吐槽区 <a class=\"header-anchor\" href=\"#\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>首先来说说为什么这个插件的代码<strong>又烂又臭</strong>，在后面我再对它进行针对性的改进。哦对了它的名字叫<strong>Clean Archives Reloaded</strong>，作者叫<strong>Viper007Bond</strong>，来自美国俄勒冈州，没错就是点名批评，看来鬼佬的编码水平也不是普遍的高啊，这坨屎简直是开源界的耻辱。去到各搜索引擎搜索“Wordpress归档”关键字还有很多文章推荐使用该插件，看来大家都不太关心代码质量，只要能用就行。 该插件的主要设计思路如下：</p>\n<ol>\n<li>从WP数据库中抓取文章</li>\n<li>根据用户配置分组并排序</li>\n<li>组织并输出HTML到页面相关位置</li>\n</ol>\n<p>OK，就这么三步，实际上我们也只需要这么点东西。暂且不讨论步骤是否可以简化，我们先来看看它有着怎样的内心世界。</p>\n<pre><code>// A direct query is used instead of get_posts() for memory reasons\n$rawposts = $wpdb-&gt;get_results( &quot;SELECT ID, post_date, post_date_gmt, comment_status, comment_count FROM $wpdb-&gt;posts WHERE post_status = 'publish' AND post_type = 'post' AND post_password = ''&quot; );\n\n</code></pre>\n<p>这个是它的唯一一条SQL语句，可以看到作者为了给我们节省内存真是殚精竭力，本着够用就行的精神，放弃使用Wordpress自带的API，直接使用查询语句从数据库中查询出来了非常有限的一些字段。值得称赞。 按照插件的思路，紧接着就是分组啦：</p>\n<pre><code>// Loop through each post and sort it into a structured array\nforeach( $rawposts as $post ) {\n\t$posts[ mysql2date( 'Y.m', $post-&gt;post_date ) ][] = $post;\n}\n$rawposts = null; // More memory cleanup\n</code></pre>\n<p>排序啦：</p>\n<pre><code>( 'new' == $atts['monthorder'] ) ? krsort( $posts ) : ksort( $posts );\n\n// Sort the posts within each month based on $atts\nforeach( $posts as $key =&gt; $month ) {\n    $sorter = array();\n    foreach ( $month as $post )\n        $sorter[] = $post-&gt;post_date_gmt;\n\n    $sortorder = ( 'new' == $atts['postorder'] ) ? SORT_DESC : SORT_ASC;\n\n    array_multisort( $sorter, $sortorder, $month );\n\n    $posts[$key] = $month;\n    unset($month);\n}\n</code></pre>\n<p>分组的思路就是根据一篇文章的年以及月来将原本的一维数组重新组织到一个新的二维数组中去，以方便后面的循环。排序有点复杂，首先大局上它是能够根据配置按月份从新到旧或者反方向的排序，然后在每个月份里面也能够根据配置从新到旧或者反方向的排序，这个设定简直蛋疼，谁这么无聊正着排一遍在里面反着又排一遍，即折磨自己又折磨读者，不过存在即合理，这里也不说它。**我想吐槽的是，既然你都把SQL写出来了，你也知道至少要排一次序了，又何必费尽周章在查出来以后排呢，我们直接在SQL里面排不比这一大串代码优雅吗？不快速吗？不节省内存吗？此外，这个分组也是萌萌哒，我们就不能在SQL里面先把组给分好吗，非要写个循环来调用 **<code>mysql2date</code>，这样真的好吗？当然如果作者没有学过 <code>ORDER BY</code>，也不知道SQL都有各自的内置日期函数，这些也就算了。我们接着往下看。 接下来的步骤是组织HTML：</p>\n<pre><code>// Generate the HTML\n$html = '&lt;div class=&quot;car-container';\nif ( 1 == $atts['usejs'] ) $html .= ' car-collapse';\n$html .= '&quot;&gt;'. &quot;\\n&quot;;\n\n// 此处省略n行\n\n$html .= &quot;&lt;/ul&gt;\\n&lt;/div&gt;\\n&quot;;\nreturn $html;\n</code></pre>\n<p>看到这里我已经瞎了。。。尤其是高亮的那一行。。。省略的N行中充斥着的都是如此的代码。它还不止有 <code>. &quot;\\n&quot;</code> 之流，在省略的内容中甚至连HTML的编码器缩进作者都保留得很好很好。WTF？？这TM都是些什么鬼？？作者的这些杠N和缩进是写给鬼看的吗？？？字符串拼凑各种内容这种事我自己不懂事的时候也干过不少也就不说了，但这作者这一种原汁原味的拼法真是我有屎以来见过的最特立独行的行为艺术。</p>\n<p>让我们接着来看生成HTML之中的一部分核心代码。显然其中会有一些循环用来生成列表，并且在每个内层循环之前应该输出一个标题之类的东西用来指示以下的内容属于哪一年哪一个月。代码如下：</p>\n<pre><code>$firstmonth = TRUE;\nforeach( $posts as $yearmonth =&gt; $posts ) {\n    list( $year, $month ) = explode( '.', $yearmonth );\n\n    $firstpost = TRUE;\n    foreach( $posts as $post ) {\n        if ( TRUE == $firstpost ) {\n            $html .= '\t&lt;li&gt;&lt;span class=&quot;car-yearmonth&quot;&gt;' . sprintf( __('%1$s %2$d'), $wp_locale-&gt;get_month($month), $year );\n            if ( '0' != $atts['postcount'] ) $html .= ' &lt;span title=&quot;' . __('Post Count', 'clean-archives-reloaded') . '&quot;&gt;(' . count($posts) . ')&lt;/span&gt;';\n            $html .= &quot;&lt;/span&gt;\\n\t\t&lt;ul class='car-monthlisting'&gt;\\n&quot;;\n            $firstpost = FALSE;\n        }\n\n        $html .= '\t\t\t&lt;li&gt;' .  mysql2date( 'd', $post-&gt;post_date ) . ': &lt;a href=&quot;' . get_permalink( $post-&gt;ID ) . '&quot;&gt;' . get_the_title( $post-&gt;ID ) . '&lt;/a&gt;';\n\n        // Unless comments are closed and there are no comments, show the comment count\n        if ( '0' != $atts['commentcount'] &amp;&amp; ( 0 != $post-&gt;comment_count || 'closed' != $post-&gt;comment_status ) )\n            $html .= ' &lt;span title=&quot;' . __('Comment Count', 'clean-archives-reloaded') . '&quot;&gt;(' . $post-&gt;comment_count . ')&lt;/span&gt;';\n\n        $html .= &quot;&lt;/li&gt;\\n&quot;;\n    }\n\n    $html .= &quot;\t\t&lt;/ul&gt;\\n\t&lt;/li&gt;\\n&quot;;\n}\n</code></pre>\n<p>第5-12行代码，第一眼看到的时候马上就能闻到一股弱者的气息。<strong>作者想要在循环开始之前先输出一个列表标题，所以想到了一个使用标志位的办法，但是我们明明可以直接在循环前面做这件事的，根本不需要这个萌萌哒标志位。</strong></p>\n<p>还有第14行。作者明明一直在标榜自己是如何节省时间节省内存的，结果在这里却使用了内置函数 <code>get_the_title</code> 以及 <code>get_permalink</code>，后者很正常，因为 wordpress 的文章链接是可以改变的，不能直接写死，必须查，那前者这个函数是做什么的呢？很明显，根据一篇文章的 ID 来获取它的标题。要如何根据 ID 来获取标题呢，我们能用算法算出来吗？显然不能，这里面显然需要一次数据库查询，至少也是一次缓存查询，而且它这个函数写在循环里面，我的天，这里面是多少条 SQL，你直接在一开始把 Title 也给查出来不就万事大吉了吗。。。</p>\n<p>插件的核心功能大概就到此为止，为了实现让用户可以点击收起与展开每个内层列表的功能，作者还添加了一些 JavaScript 代码，就不吐槽了吧，我已经好累了。</p>\n<h2 id=\"-2\">改进 <a class=\"header-anchor\" href=\"#-2\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>赶紧把这插件删了，删个干净，然后我们来改代码。因为我并不需要配置什么什么的，也不需要什么JS，怎么个分组怎么个排序的需求很明确，所以直接 HARD CODE。原插件还有一个缓存查询出来的数据的功能，由于我已经用了更强大的缓存，直接将动态页面缓存成纯 HTML，所以也不需要。以上内容通通砍掉，核心代码就很简单了。 首先是 SQL 查询：</p>\n<pre><code>global $wpdb;\n$rawposts = $wpdb-&gt;get_results(&quot;SELECT ID, year(post_date) as post_year, post_date, post_date_gmt, post_title FROM $wpdb-&gt;posts WHERE post_status = 'publish' AND post_type = 'post' AND post_password = '' order by post_date_gmt desc&quot;);\n</code></pre>\n<p>这里按照发布时间降序排序，为什么要用GMT时间而不直接用本地时间呢，我猜可能是为了防止我在这边发了一篇文章然后马上飞到美国又发一篇，可能会乱套吧，反正这么写更严谨，虽然不太可能发生。然后除了多选择一个post_title字段以外，还使用MySQL的一个内置函数选择了这篇文章发布时的年度，这样就不用在分组的时候使用N多遍 <code>mysql2date</code> 函数了。节省了大量步骤。 然后是分组：</p>\n<pre><code>foreach ($rawposts as $post) {\n    $posts[$post-&gt;post_year][] = $post;\n}\n$rawposts = null;\n</code></pre>\n<p>然后是HTML部分：</p>\n<pre><code>$html = '&lt;div class=&quot;archives-container&quot;&gt;&lt;ul class=&quot;archives-list&quot;&gt;';\nforeach ($posts as $year =&gt; $posts_yearly) {\n    $html .= '&lt;li&gt;&lt;div class=&quot;archives-year&quot;&gt;' . $year . '年&lt;/div&gt;&lt;ul class=&quot;archives-sublist&quot;&gt;';\n    foreach ($posts_yearly as $post) {\n        $html .= '&lt;li&gt;';\n        $html .= '&lt;time datetime=&quot;' . $post-&gt;post_date . '&quot;&gt;' . mysql2date('m月d日 D', $post-&gt;post_date, true) . '&lt;/time&gt;';\n        $html .= '&lt;a href=&quot;' . get_permalink($post-&gt;ID) . '&quot;&gt;' . $post-&gt;post_title . '&lt;/a&gt;';\n        $html .= &quot;&lt;/li&gt;&quot;;\n    }\n    $html .= &quot;&lt;/ul&gt;&lt;/li&gt;&quot;;\n}\n$html .= &quot;&lt;/ul&gt;&lt;/div&gt;&quot;;\nreturn $html;\n</code></pre>\n<p>两个字：简洁。</p>\n<h2 id=\"-3\">使用方法 <a class=\"header-anchor\" href=\"#-3\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>我们复制一份主题目录下的 <code>page.php</code> 文件，然后重命名为 <code>template-archives.php</code>，主要是给它加上以上的代码并且调用之。 对于我正在使用的主题来说，文件内容如下：</p>\n<pre><code>&lt;?php\n/*\nTemplate Name: archives\n*/\n\n\nfunction _PostList($atts = array())\n{\n    global $wpdb;\n    $rawposts = $wpdb-&gt;get_results(&quot;SELECT ID, year(post_date) as post_year, post_date, post_title FROM $wpdb-&gt;posts WHERE post_status = 'publish' AND post_type = 'post' AND post_password = '' order by post_date desc&quot;);\n    foreach ($rawposts as $post) {\n        $posts[$post-&gt;post_year][] = $post;\n    }\n    $rawposts = null;\n    $html = '&lt;div class=&quot;archives-container&quot;&gt;&lt;ul class=&quot;archives-list&quot;&gt;';\n    foreach ($posts as $year =&gt; $posts_yearly) {\n        $html .= '&lt;li&gt;&lt;div class=&quot;archives-year&quot;&gt;' . $year . '年&lt;/div&gt;&lt;ul class=&quot;archives-sublist&quot;&gt;';\n        foreach ($posts_yearly as $post) {\n            $html .= '&lt;li&gt;';\n            $html .= '&lt;time datetime=&quot;' . $post-&gt;post_date . '&quot;&gt;' . mysql2date('m月d日 D', $post-&gt;post_date, true) . '&lt;/time&gt;';\n            $html .= '&lt;a href=&quot;' . get_permalink($post-&gt;ID) . '&quot;&gt;' . $post-&gt;post_title . '&lt;/a&gt;';\n            $html .= &quot;&lt;/li&gt;&quot;;\n        }\n        $html .= &quot;&lt;/ul&gt;&lt;/li&gt;&quot;;\n    }\n    $html .= &quot;&lt;/ul&gt;&lt;/div&gt;&quot;;\n    return $html;\n}\n\nfunction _PostCount()\n{\n    $num_posts = wp_count_posts('post');\n    return number_format_i18n($num_posts-&gt;publish);\n}\n\nget_header(); ?&gt;\n\n    &lt;div id=&quot;primary&quot; class=&quot;content-area&quot;&gt;\n        &lt;main id=&quot;main&quot; class=&quot;site-main&quot; role=&quot;main&quot;&gt;\n\n            &lt;article &lt;?php post_class(); ?&gt;&gt;\n                &lt;header class=&quot;entry-header&quot;&gt;\n                    &lt;h1 class=&quot;entry-title&quot;&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n                &lt;/header&gt;\n                &lt;!-- .entry-header --&gt;\n\n                &lt;div class=&quot;entry-content&quot;&gt;\n                    &lt;?php\n                    echo _PostList();\n                    ?&gt;\n                &lt;/div&gt;\n                &lt;!-- .entry-content --&gt;\n            &lt;/article&gt;\n            &lt;!-- #post-## --&gt;\n\n\n        &lt;/main&gt;\n        &lt;!-- #main --&gt;\n    &lt;/div&gt;\n    &lt;!-- #primary --&gt;\n\n&lt;?php get_sidebar(); ?&gt;\n&lt;?php get_footer(); ?&gt;\n</code></pre>\n<p>然后我们把它上传到主机的主题目录下，来到wordpress管理控制台新建一个page，模板选择 <code>archives</code>，什么也不用输入（可以加个标题），保存，就可以看到效果了。当然这里没有涉及到CSS样式，可以在主题的 <code>style.css</code> 中自定义，也可以直接写在 <code>template-archives.php</code> 内，爱写哪写哪。本站使用的CSS如下所示：</p>\n<pre><code>.archives-year {\n    color: #777;\n    border-bottom: 1px solid #e8e8e8;\n    margin: 40px 0 10px 0;\n    padding-bottom: 7px;\n}\n\n.archives-list {\n    list-style: none;\n    margin: 20px 0!important;\n}\n\n.archives-sublist {\n    list-style: none;\n    font-size: 90%;\n    margin-left: 0 !important;\n}\n\n.archives-sublist li time {\n    color: #777;\n    width: 140px;\n    min-width: 140px;\n    max-width: 140px;\n    display: table-cell;\n    vertical-align: top;\n}\n\n.archives-sublist li a {\n    display: table-cell;\n    vertical-align: top;\n}\n</code></pre>\n<p><a href=\"http://anubarak.com/archives/\">点此查看实际效果</a> （可能因为网站更新而不符合）</p>\n"}