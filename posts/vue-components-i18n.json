{"id":"vue-components-i18n","title":"为 Vue 组件库实现国际化支持","date":"2017-06-08T15:27:00.000Z","categories":["JavaScript"],"tags":["Vue","i18n"],"html":"<p>其实这部分代码主要是参考着 element ui 和 iview 做的（iview 又是抄的 element），对关键代码进行了一些简化。主要需要实现的需求有：</p>\n<ol>\n<li>用户可以更改、切换组件库使用的语言（应用级别）</li>\n<li>用户可以自定义组件使用的措辞</li>\n<li>兼容 <code>vue-i18n</code> 这个库</li>\n</ol>\n<!--more-->\n<h2 id=\"\">关键代码 <a class=\"header-anchor\" href=\"#\" aria-hidden=\"true\">&#128279;</a></h2>\n<h3 id=\"srclocalelangen-usjs\">src/locale/lang/en-US.js <a class=\"header-anchor\" href=\"#srclocalelangen-usjs\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>首先是 Locale 文件，把措辞映射到一个 key 上面去，比如说英文：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">uiv</span>: {\n    <span class=\"hljs-attr\">datePicker</span>: {\n      <span class=\"hljs-attr\">clear</span>: <span class=\"hljs-string\">'Clear'</span>,\n      <span class=\"hljs-attr\">today</span>: <span class=\"hljs-string\">'Today'</span>,\n      <span class=\"hljs-attr\">month</span>: <span class=\"hljs-string\">'Month'</span>,\n      <span class=\"hljs-attr\">month1</span>: <span class=\"hljs-string\">'January'</span>,\n      <span class=\"hljs-attr\">month2</span>: <span class=\"hljs-string\">'February'</span>,\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n}\n</code></pre>\n<p>对应的中文文件只需要把相应的 Value 翻译成中文即可。这里有一个最基本的设想就是，<strong>如果需要增加一种语言，应该是只需要增加一个这样的文件即可</strong>。</p>\n<h3 id=\"srclocaleindexjs\">src/locale/index.js <a class=\"header-anchor\" href=\"#srclocaleindexjs\" aria-hidden=\"true\">&#128279;</a></h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> defaultLang <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./lang/en-US'</span>\n<span class=\"hljs-keyword\">let</span> lang = defaultLang\n\n<span class=\"hljs-keyword\">let</span> i18nHandler = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> vuei18n = <span class=\"hljs-built_in\">Object</span>.getPrototypeOf(<span class=\"hljs-keyword\">this</span>).$t\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> vuei18n === <span class=\"hljs-string\">'function'</span>) {\n    <span class=\"hljs-keyword\">return</span> vuei18n.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>)\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> t = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">path, options</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> value = i18nHandler.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>)\n  <span class=\"hljs-keyword\">if</span> (value !== <span class=\"hljs-literal\">null</span> &amp;&amp; <span class=\"hljs-keyword\">typeof</span> value !== <span class=\"hljs-string\">'undefined'</span>) {\n    <span class=\"hljs-keyword\">return</span> value\n  }\n  <span class=\"hljs-keyword\">const</span> array = path.split(<span class=\"hljs-string\">'.'</span>)\n  <span class=\"hljs-keyword\">let</span> current = lang\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, j = array.length; i &lt; j; i++) {\n    <span class=\"hljs-keyword\">const</span> property = array[i]\n    value = current[property]\n    <span class=\"hljs-keyword\">if</span> (i === j - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> value\n    <span class=\"hljs-keyword\">if</span> (!value) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n    current = value\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> use = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">l</span>) </span>{\n  lang = l || lang\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> i18n = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>{\n  i18nHandler = fn || i18nHandler\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {use, t, i18n}\n</code></pre>\n<p>这段代码乍一看挺复杂，其实弄明白后就很简单：</p>\n<ol>\n<li><code>i18nHandler</code> 是用来检测并套用 <code>vue-i18n</code> 的，如果用户安装了这个插件，则会使用绑定在 Vue 实例上的 <code>$t</code> 方法进行取值</li>\n<li><code>t</code> 方法是用来取值的。首先看能否用 <code>i18nHandler</code> 取到，如果能取到则直接用，取不到就要自行解决了。最后返回取到（或者取不到，则为空）的值。</li>\n<li><code>use</code> 与 <code>i18n</code> 这两个方法是在整个组件库作为插件被 Vue 安装的时候调用的，主要用来让用户自定义语言等等。</li>\n</ol>\n<p>原版的 <code>t</code> 方法有一个与之配合的模板字符串替换的方法（比如说处理 <code>My name is ${0}</code> 这种 Value），这里简洁起见把它删掉了，实际上也暂时用不到。</p>\n<h3 id=\"srcmixinslocalejs\">src/mixins/locale.js <a class=\"header-anchor\" href=\"#srcmixinslocalejs\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>一个 mixin，很简单：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> { t } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../locale'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">methods</span>: {\n    t (...args) {\n      <span class=\"hljs-keyword\">return</span> t.apply(<span class=\"hljs-keyword\">this</span>, args)\n    }\n  }\n}\n</code></pre>\n<p>就是给组件加上一个 <code>t</code> 方法。那么现在组件在需要根据语言切换的地方，只要加入这个 mixin 并在输出的地方使用 <code>t(key)</code> 即可，比如 <code>t('uiv.datePicker.month1')</code> 在默认的配置下会使用 <code>January</code>，而如果用户配置了中文则会使用 <code>一月</code>。</p>\n<h3 id=\"srccomponentsindexjs\">src/components/index.js <a class=\"header-anchor\" href=\"#srccomponentsindexjs\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>最后一步：将上述的两个方法 <code>use</code> 和 <code>i18n</code> 写入到组件库入口的 <code>install</code> 方法中去。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> install = <span class=\"hljs-function\">(<span class=\"hljs-params\">Vue, options = {}</span>) =&gt;</span> {\n  locale.use(options.locale)\n  locale.i18n(options.i18n)\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<h2 id=\"-2\">如何使用 <a class=\"header-anchor\" href=\"#-2\" aria-hidden=\"true\">&#128279;</a></h2>\n<h3 id=\"-3\">简单用法 <a class=\"header-anchor\" href=\"#-3\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>切换中文：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n<span class=\"hljs-keyword\">import</span> uiv <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'uiv'</span>\n<span class=\"hljs-keyword\">import</span> locale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'uiv/src/locale/lang/zh-CN'</span>\n\nVue.use(uiv, { locale })\n</code></pre>\n<p>显然, 如果对预设的措辞不满意，我们还可以自定义, 只需要创造一个 <code>locale</code> 对象并替换之即可。</p>\n<h3 id=\"vue-i18n\">配合 Vue I18n 使用 <a class=\"header-anchor\" href=\"#vue-i18n\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>只要跟着 <code>vue-i18n</code> 的文档把自己的 App 配好就行，不用管组件库，会自动适配。<strong>但有一点要注意：需要先将 组件库的语言包合并到 App 语言包中去</strong>。比如：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> uivLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'uiv/src/locale/lang/zh-CN'</span>\n\n<span class=\"hljs-keyword\">let</span> appLocale = <span class=\"hljs-built_in\">Object</span>.assign({}, uivLocale, {\n  <span class=\"hljs-comment\">// ...</span>\n})\n\n<span class=\"hljs-comment\">// 接下来该干嘛干嘛</span>\n</code></pre>\n"}