{"id":"koa-note","title":"Koa Note","date":"2017-07-07T16:11:00.000Z","index":true,"categories":["JavaScript"],"tags":["Koa","NodeJs"],"html":"<blockquote>\n<p>Koa是一个类似于 Express 的 Web 开发框架，创始人也是同一个人。它的主要特点是，使用了 ES6 的 Generator 函数，进行了架构的重新设计。也就是说，Koa的原理和内部结构很像 Express，但是语法和内部结构进行了升级。</p>\n<p>—— <cite>阮一峰博客</cite></p>\n</blockquote>\n<p><strong>想要达到使用 Koa2 的完整体验，需要将 Node 版本升级到 v7.6+ 以支持 async 语法。</strong></p>\n<p><strong>为什么是 Koa 而不是 Express 4.0？</strong></p>\n<p>因为 Generator 带来的改动太大了，相当于推倒重来。</p>\n<p><strong>以下内容基于 Koa2</strong></p>\n<!--more-->\n<h2 id=\"\">应用 <a class=\"header-anchor\" href=\"#\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>一个 Koa Application（以下简称 app）由一系列 generator 中间件组成。按照编码顺序在栈内依次执行，从这个角度来看，Koa app 和其他中间件系统（比如 Ruby Rack 或者 Connect / Express ）没有什么太大差别。</p>\n<p>简单的 Hello World 应用程序:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> Koa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'koa'</span>);\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Koa();\n\n<span class=\"hljs-comment\">// response</span>\napp.use(<span class=\"hljs-function\"><span class=\"hljs-params\">ctx</span> =&gt;</span> {\n  ctx.body = <span class=\"hljs-string\">'Hello Koa'</span>;\n});\n\napp.listen(<span class=\"hljs-number\">3000</span>);\n</code></pre>\n<h2 id=\"-2\">级联代码 <a class=\"header-anchor\" href=\"#-2\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>Koa 中间件以一种非常传统的方式级联起来。</p>\n<p>在以往的 Node 开发中，频繁使用回调不太便于展示复杂的代码逻辑，在 Koa 中，我们可以写出真正具有表现力的中间件。与 Connect 实现中间件的方法相对比，Koa 的做法不是简单的将控制权依次移交给一个又一个的中间件直到程序结束，而有点像“穿越一只洋葱”。</p>\n<p><img src=\"https://camo.githubusercontent.com/d80cf3b511ef4898bcde9a464de491fa15a50d06/68747470733a2f2f7261772e6769746875622e636f6d2f66656e676d6b322f6b6f612d67756964652f6d61737465722f6f6e696f6e2e706e67\" alt=\"图示 Koa 中间件级联\"></p>\n<p>下边这个例子展现了使用这一特殊方法书写的 Hello World 范例。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> Koa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'koa'</span>);\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Koa();\n\n<span class=\"hljs-comment\">// x-response-time</span>\napp.use(<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">ctx, next</span>) </span>{\n  <span class=\"hljs-comment\">// (1) 进入路由</span>\n  <span class=\"hljs-keyword\">const</span> start = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n  <span class=\"hljs-keyword\">await</span> next();\n  <span class=\"hljs-comment\">// (5) 再次进入 x-response-time 中间件，记录2次通过此中间件「穿越」的时间</span>\n  <span class=\"hljs-keyword\">const</span> ms = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>() - start;\n  <span class=\"hljs-comment\">// (6) 返回 this.body</span>\n  ctx.set(<span class=\"hljs-string\">'X-Response-Time'</span>, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${ms}</span>ms`</span>);\n});\n\n<span class=\"hljs-comment\">// logger</span>\napp.use(<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">ctx, next</span>) </span>{\n  <span class=\"hljs-comment\">// (2) 进入 logger 中间件</span>\n  <span class=\"hljs-keyword\">const</span> start = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n  <span class=\"hljs-keyword\">await</span> next();\n  <span class=\"hljs-comment\">// (4) 再次进入 logger 中间件，记录2次通过此中间件「穿越」的时间</span>\n  <span class=\"hljs-keyword\">const</span> ms = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>() - start;\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${ctx.method}</span> <span class=\"hljs-subst\">${ctx.url}</span> - <span class=\"hljs-subst\">${ms}</span>`</span>);\n});\n\n<span class=\"hljs-comment\">// response</span>\napp.use(<span class=\"hljs-function\"><span class=\"hljs-params\">ctx</span> =&gt;</span> {\n  <span class=\"hljs-comment\">// (3) 进入 response 中间件</span>\n  ctx.body = <span class=\"hljs-string\">'Hello World'</span>;\n});\n\napp.listen(<span class=\"hljs-number\">3000</span>);\n</code></pre>\n<p>也许刚从 Express 过来的同学会一脸懵逼，实际上我们可以把它想象成这样的一个流程（类似 LESS 代码）：</p>\n<pre><code class=\"language-less\"><span class=\"hljs-selector-class\">.x-response-time</span> {\n  <span class=\"hljs-comment\">// (1) do some stuff</span>\n  <span class=\"hljs-selector-class\">.logger</span> {\n    <span class=\"hljs-comment\">// (2) do some other stuff</span>\n    <span class=\"hljs-selector-class\">.response</span> {\n      <span class=\"hljs-comment\">// (3) NO next yield !</span>\n      <span class=\"hljs-comment\">// this.body = 'hello world'</span>\n    }\n    <span class=\"hljs-comment\">// (4) do some other stuff later</span>\n  }\n  <span class=\"hljs-comment\">// (5) do some stuff lastest and return</span>\n}\n</code></pre>\n<p>这便是 Koa 中间件的一大特色了。另一点也能在例子中找到：即 Koa 支持 <code>async</code> 以及 <code>await</code> 语法，可以在中间件中进行任意方式的使用（比如 await mongoose 操作），这样对比起来 Express 其优点就十分明显了。</p>\n<h2 id=\"-3\">常用的中间件 <a class=\"header-anchor\" href=\"#-3\" aria-hidden=\"true\">&#128279;</a></h2>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/koa-bodyparser\">koa-bodyparser</a></li>\n<li><a href=\"https://www.npmjs.com/package/koa-favicon\">koa-favicon</a></li>\n<li><a href=\"https://www.npmjs.com/package/koa-helmet\">koa-helmet</a></li>\n<li><a href=\"https://www.npmjs.com/package/koa-lusca\">koa-lusca</a></li>\n<li><a href=\"https://www.npmjs.com/package/koa-morgan\">koa-morgan</a></li>\n<li><a href=\"https://www.npmjs.com/package/koa-multer\">koa-multer</a></li>\n<li><a href=\"https://www.npmjs.com/package/koa-passport\">koa-passport</a></li>\n<li><a href=\"https://www.npmjs.com/package/koa-router\">koa-router</a></li>\n<li><a href=\"https://www.npmjs.com/package/koa-session\">koa-session</a></li>\n<li><a href=\"https://www.npmjs.com/package/koa-static-cache\">koa-static-cache</a></li>\n</ul>\n<p>（等等）</p>\n<h2 id=\"-4\">错误处理 <a class=\"header-anchor\" href=\"#-4\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>除非 <code>app.silent</code> 被设置为 <code>true</code>，否则所有 error 都会被输出到 <code>stderr</code>，并且默认的 error handler 不会输出 <code>err.status === 404 || err.expose === true</code> 的错误。可以自定义「错误事件」来监听 Koa app 中发生的错误，比如一个简单的例子：记录错误日志</p>\n<pre><code class=\"language-javascript\">app.on(<span class=\"hljs-string\">'error'</span>, err =&gt;\n  log.error(<span class=\"hljs-string\">'server error'</span>, err)\n);\n</code></pre>\n<h2 id=\"-5\">应用上下文 <a class=\"header-anchor\" href=\"#-5\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>Koa 的上下文（Context）将 request 与 response 对象封装至一个对象中，并提供了一些帮助开发者编写业务逻辑的方法。</p>\n<p>每个 request 会创建一个 Context，并且向中间件中传引用值。</p>\n<pre><code class=\"language-javascript\">app.use(<span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; {\n  ctx; <span class=\"hljs-comment\">// is the Context</span>\n  ctx.request; <span class=\"hljs-comment\">// is a koa Request</span>\n  ctx.response; <span class=\"hljs-comment\">// is a koa Response</span>\n});\n</code></pre>\n<p><strong>需要注意的是，挂载在 Context 对象上的并不是 Node.js 原生的 Response 和 Request 对象，而是经过 Koa 封装过的。Koa 提供另外的方法来访问原生对象，但是并不建议这么做！</strong></p>\n<p>为了使用方便，许多上下文属性和方法都被委托代理到他们的 <code>ctx.request</code> 或 <code>ctx.response</code>，比如访问 <code>ctx.type</code> 和 <code>ctx.length</code> 将被代理到 <code>response</code> 对象，<code>ctx.path</code> 和 <code>ctx.method</code> 将被代理到 <code>request</code> 对象。</p>\n"}