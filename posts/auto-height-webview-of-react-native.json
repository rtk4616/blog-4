{"id":"auto-height-webview-of-react-native","title":"Auto-height Webview of ReactNative","date":"2018-04-24T06:32:30.482Z","tags":["JavaScript","ReactNative"],"index":false,"draft":false,"html":"<!-- 「」 -->\n<p>自动高的 Webview 实现方式其实跟 iframe 无二，无非是计算其内容高度后再赋值给容器样式。但是普通的办法实际上用起来差强人意，<strong>其问题主要体现在页面加载过慢，需要整个页面（包括图片）加载完成后才能计算出高度</strong>。而实际想要的效果往往是跟普通“网页”的表现一致，即：<strong>先加载文字，图片等内容异步加载、显示</strong>。在尝试了多款开源解决方案后，问题均没有得到解决，因此有了自己动手的想法。</p>\n<p>不过本方案目前也只适用于自己拼接的 HTML，不适用于直接打开链接的 Webview，应用场景主要是在 ReactNative 应用内打开由 CMS 编辑的类新闻页面。</p>\n<p>主要思路为：通过 Webview 提供的 <code>postMessage</code> 交互方式，不断地从 HTML 页面把自己计算好的高度抛送给 APP 端。但是这里其实有个问题，ReactNative Webview 的 <code>postMessage</code> 必须在页面加载完成以后才会注入，因此可以先加载一个空白页，待 <code>postMessage</code> 注入完成以后，再将实际文章内容插入到 <code>body</code> 中。</p>\n<p>但是这么做有一个问题就是，页面将无法知道真正的内容“是否已加载完”，因为 <code>window.onload</code> 事件在加载开始之前就已经结束了。因此它只能不停地抛送高度信息，直到页面被销毁。</p>\n<p>核心代码（HTML）：</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"shortcut icon\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"data:image/x-icon;,\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"image/x-icon\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"content-type\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"text/html; charset=utf-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span>\n          <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">var</span> inserted = <span class=\"hljs-literal\">false</span>;\n      <span class=\"hljs-keyword\">var</span> interval = setInterval(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> body = <span class=\"hljs-built_in\">document</span>.body, html = <span class=\"hljs-built_in\">document</span>.documentElement;\n        <span class=\"hljs-keyword\">var</span> height = <span class=\"hljs-built_in\">Math</span>.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">window</span>.postMessage) {\n          <span class=\"hljs-keyword\">if</span> (!inserted) {\n            <span class=\"hljs-built_in\">document</span>.body.innerHTML = <span class=\"hljs-string\">'${valueParsed}'</span>;\n            inserted = <span class=\"hljs-literal\">true</span>;\n          }\n          <span class=\"hljs-built_in\">window</span>.postMessage(height + <span class=\"hljs-string\">''</span>);\n        }\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.readyState === <span class=\"hljs-string\">'complete'</span>) {\n          <span class=\"hljs-comment\">//clearInterval(interval)</span>\n        }\n      }, <span class=\"hljs-number\">200</span>);\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>核心代码（App）：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AutoHeightWebview</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PureComponent</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span> (props) {\n    <span class=\"hljs-keyword\">super</span>(props);\n    <span class=\"hljs-keyword\">this</span>.state = {\n      <span class=\"hljs-attr\">webviewHeight</span>: <span class=\"hljs-number\">0</span>\n    };\n  }\n\n  assembleHTML = <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> {\n    <span class=\"hljs-comment\">// 组装HTML，略</span>\n  };\n\n  onMessage = <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> webviewHeight = <span class=\"hljs-built_in\">parseFloat</span>(event.nativeEvent.data);\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">isNaN</span>(webviewHeight) &amp;&amp; <span class=\"hljs-keyword\">this</span>.state.webviewHeight !== webviewHeight) {\n      <span class=\"hljs-keyword\">this</span>.setState({webviewHeight});\n    }\n  };\n\n  render () {\n    <span class=\"hljs-keyword\">const</span> HTML = <span class=\"hljs-keyword\">this</span>.assembleHTML(<span class=\"hljs-keyword\">this</span>.props.html);\n    <span class=\"hljs-keyword\">const</span> onLoadEnd = <span class=\"hljs-keyword\">this</span>.props.onLoadEnd || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{};\n    <span class=\"hljs-comment\">// 防止 postMessage 与页面原有方法冲突</span>\n    <span class=\"hljs-keyword\">const</span> patchPostMessageFunction = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">var</span> originalPostMessage = <span class=\"hljs-built_in\">window</span>.postMessage;\n      <span class=\"hljs-keyword\">var</span> patchedPostMessage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">message, targetOrigin, transfer</span>) </span>{\n        originalPostMessage(message, targetOrigin, transfer);\n      };\n      patchedPostMessage.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">String</span>(<span class=\"hljs-built_in\">Object</span>.hasOwnProperty).replace(<span class=\"hljs-string\">'hasOwnProperty'</span>, <span class=\"hljs-string\">'postMessage'</span>);\n      };\n      <span class=\"hljs-built_in\">window</span>.postMessage = patchedPostMessage;\n    };\n\n    <span class=\"hljs-keyword\">const</span> patchPostMessageJsCode = <span class=\"hljs-string\">'('</span> + <span class=\"hljs-built_in\">String</span>(patchPostMessageFunction) + <span class=\"hljs-string\">')();'</span>;\n\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WebView</span>\n        <span class=\"hljs-attr\">injectedJavaScript</span>=<span class=\"hljs-string\">{patchPostMessageJsCode}</span>\n        <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{{html:</span> <span class=\"hljs-attr\">HTML</span>, <span class=\"hljs-attr\">baseUrl:</span> '<span class=\"hljs-attr\">http:</span>'}}\n        <span class=\"hljs-attr\">scalesPageToFit</span>=<span class=\"hljs-string\">{Platform.OS</span> !== <span class=\"hljs-string\">'ios'</span>}\n        <span class=\"hljs-attr\">bounces</span>=<span class=\"hljs-string\">{false}</span>\n        <span class=\"hljs-attr\">scrollEnabled</span>=<span class=\"hljs-string\">{false}</span>\n        <span class=\"hljs-attr\">startInLoadingState</span>=<span class=\"hljs-string\">{false}</span>\n        <span class=\"hljs-attr\">automaticallyAdjustContentInsets</span>=<span class=\"hljs-string\">{true}</span>\n        <span class=\"hljs-attr\">onMessage</span>=<span class=\"hljs-string\">{this.onMessage}</span>\n        <span class=\"hljs-attr\">onLoadEnd</span>=<span class=\"hljs-string\">{onLoadEnd}</span>\n      /&gt;</span>\n    );\n  }\n}\n</span></code></pre>\n","full":true}