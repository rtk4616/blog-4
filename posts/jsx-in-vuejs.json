{"id":"jsx-in-vuejs","title":"JSX in Vue.js","date":"2017-12-13T04:41:42.021Z","tags":["Vue","JSX","Babel","Webpack"],"index":true,"draft":false,"html":"<p>在基于 Webpack 的 Vue 项目中添加 JSX 支持：</p>\n<pre><code>$ yarn add babel-plugin-syntax-jsx babel-plugin-transform-vue-jsx babel-helper-vue-jsx-merge-props --dev\n</code></pre>\n<p>各依赖的作用：</p>\n<ul>\n<li><code>babel-plugin-syntax-jsx</code> 提供基础的 JSX 语法转换</li>\n<li><code>babel-plugin-transform-vue-jsx</code> 提供基于 Vue 的 JSX 特殊语法</li>\n<li><code>babel-helper-vue-jsx-merge-props</code> 是可选的，提供对类似 <code>&lt;comp {...props}/&gt;</code> 写法的支持</li>\n</ul>\n<p>然后在 <code>.babelrc</code> 中，增加：</p>\n<pre><code>{\n  ...\n  &quot;plugins&quot;: [\n    &quot;transform-vue-jsx&quot;,\n    ...\n  ]\n  ...\n}\n</code></pre>\n<p>注意如果有其它 env 也要如此加上 <code>transform-vue-jsx</code> 插件。</p>\n<!-- more -->\n<h2 id=\"difference-from-react-jsx\">Difference from React JSX <a class=\"header-anchor\" href=\"#difference-from-react-jsx\" aria-hidden=\"true\">&#128279;</a></h2>\n<pre><code class=\"language-javascript\">render (h) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n      <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"foo\"</span>\n      <span class=\"hljs-attr\">domPropsInnerHTML</span>=<span class=\"hljs-string\">\"bar\"</span>\n      <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.clickHandler}</span>\n      <span class=\"hljs-attr\">nativeOnClick</span>=<span class=\"hljs-string\">{this.nativeClickHandler}</span>\n      <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">foo:</span> <span class=\"hljs-attr\">true</span>, <span class=\"hljs-attr\">bar:</span> <span class=\"hljs-attr\">false</span> }}\n      <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color:</span> '<span class=\"hljs-attr\">red</span>', <span class=\"hljs-attr\">fontSize:</span> '<span class=\"hljs-attr\">14px</span>' }}\n      <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"key\"</span>\n      <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"ref\"</span>\n      <span class=\"hljs-attr\">refInFor</span>\n      <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"slot\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<p>需要注意的是，事件绑定中，还有另外一个跟 react 不一样的地方：<code>onMouseEnter</code> 是不起作用的，只能写 <code>onMouseenter</code> 或者 <code>on-mouseenter</code>，以此类推。</p>\n<h2 id=\"vue-directives\">Vue directives <a class=\"header-anchor\" href=\"#vue-directives\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>除了 <code>v-show</code> 以外，所有的内置指令都<strong>不能</strong>在 JSX 中工作。</p>\n<p>自定义指令可以使用 <code>v-name={value}</code> 的写法，但是这样会缺少修饰符以及参数。如果需要完整的指令功能，可以这么做：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> directives = [\n  { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'my-dir'</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">123</span>, <span class=\"hljs-attr\">modifiers</span>: { <span class=\"hljs-attr\">abc</span>: <span class=\"hljs-literal\">true</span> } }\n]\n\n<span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> {<span class=\"hljs-attr\">...</span>{ <span class=\"hljs-attr\">directives</span> }}/&gt;</span>\n</span></code></pre>\n"}