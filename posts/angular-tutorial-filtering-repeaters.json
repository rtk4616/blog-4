{"id":"angular-tutorial-filtering-repeaters","title":"Angular 教程：过滤循环器","date":"2015-12-25T17:09:58.000Z","categories":["JavaScript"],"tags":["AngularJs"],"html":"<p>在上一步中我们花了大量精力去给应用搭建框架，所以现在来做些简单的事情：给列表添加一个关键词搜索（真的很简单）。同时我们会编写一个端到端测试，它将一直监控着我们的应用并且及时发现问题。</p>\n<ul>\n<li>应用现在包含一个搜索框。需要注意的是页面上显示的手机列表现在与搜索框中的输入内容有关。</li>\n</ul>\n<p>最重要的改动如下所示。你可以在<a href=\"https://github.com/angular/angular-phonecat/compare/step-2...step-3\" title=\"See diff on Github\">GitHub</a>上查看它与之前的代码有何区别。</p>\n<hr>\n<h2 id=\"\">控制器 <a class=\"header-anchor\" href=\"#\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>控制器没有发生任何变化。</p>\n<hr>\n<h2 id=\"-2\">模板 <a class=\"header-anchor\" href=\"#-2\" aria-hidden=\"true\">&#128279;</a></h2>\n<p><code>app/index.html</code>：</p>\n<pre><code>&lt;div class=&quot;container-fluid&quot;&gt;\n  &lt;div class=&quot;row&quot;&gt;\n    &lt;div class=&quot;col-md-2&quot;&gt;\n      &lt;!--Sidebar content--&gt;\n\n      Search: &lt;input ng-model=&quot;query&quot;&gt;\n\n    &lt;/div&gt;\n    &lt;div class=&quot;col-md-10&quot;&gt;\n      &lt;!--Body content--&gt;\n\n      &lt;ul class=&quot;phones&quot;&gt;\n        &lt;li ng-repeat=&quot;phone in phones | filter:query&quot;&gt;\n          {{phone.name}}\n          &lt;p&gt;{{phone.snippet}}&lt;/p&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>我们给页面添加了一个标准的 HTML 输入框<code>&lt;input&gt;</code>，然后使用 Angular 的过滤（filter）功能结合用户输入来对 ngRepeat 指令进行处理。<span style=\"line-height: 1.5;\">这允许用户输入搜索关键词然后即时地在手机列表中看到结果。</span></p>\n<p><span style=\"line-height: 1.5;\">新添加的代码做了如下示范：</span></p>\n<ul>\n<li>数据绑定：Angular 的核心特色之一。当页面加载的时候，Angular 会将输入框的值绑定到一个有着与其相同名字的数据模型上并且保持两者之间的同步。在这段代码中，用户在输入框中输入的数据（名为<code>query</code>）会即时地成为列表循环中的过滤器（<code>phone in phones | filter:query</code>）。数据的改动影响到循环器的输入，然后循环器根据模型的实时状态来更新 DOM</li>\n<li><code>filter</code>过滤器的使用：<a href=\"https://docs.angularjs.org/api/ng/filter/filter\">filter</a> 功能使用<code>query</code>的值来创建一个由只包含匹配<code>query</code>的记录组成的新数组</li>\n</ul>\n<p><code>ngRepeat</code>在<code>filter</code>过滤器返回的数组改变之时会自动更新视图，这之中的过程对开发者来说是完全不可见的。</p>\n<p><img src=\"https://raw.githubusercontent.com/wxsms/wxsms-img-holder/master/tutorial_03.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"-3\">测试 <a class=\"header-anchor\" href=\"#-3\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>在上一步中，我们学习了如何编写和执行单元测试。</p>\n<p>单元测试对应用中的使用 JavaScript 编写的控制器和其它部件可以很好地发挥作用，但是不能测试 DOM 的修改以及应用整体逻辑。对这些情况，端到端测试是更好的选择。</p>\n<p>既然搜索功能是完全通过模板与数据绑定实现的，我们就开始编写一个端到端测试来验证它是否正确地工作：</p>\n<p><code>test/e2e/scenarios.js</code>：</p>\n<pre><code>describe('PhoneCat App', function() {\n\n  describe('Phone list view', function() {\n\n    beforeEach(function() {\n      browser.get('app/index.html');\n    });\n\n\n    it('should filter the phone list as a user types into the search box', function() {\n\n      var phoneList = element.all(by.repeater('phone in phones'));\n      var query = element(by.model('query'));\n\n      expect(phoneList.count()).toBe(3);\n\n      query.sendKeys('nexus');\n      expect(phoneList.count()).toBe(1);\n\n      query.clear();\n      query.sendKeys('motorola');\n      expect(phoneList.count()).toBe(2);\n    });\n  });\n});\n</code></pre>\n<p>这个测试验证了搜索框与循环器之间连接的正确性。同样，十分简洁。</p>\n<h3 id=\"protractor\">使用 Protractor 执行端到端测试 <a class=\"header-anchor\" href=\"#protractor\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>虽然这个测试看起来很像是使用 Jasmine 为控制器编写的单元测试，但端到端测试使用的是 <a href=\"https://github.com/angular/protractor\">Protractor</a> 提供的 API，可以从这里获取更多信息： <a href=\"http://angular.github.io/protractor/#/api\">http://angular.github.io/protractor/#/api</a></p>\n<p>就像 Karma 是单元测试的执行者一样，我们使用 Protractor 来执行端到端测试。尝试使用<code>npm run protractor</code>来运行它。</p>\n<p>端到端测试是比较慢的，因此不像单元测试，Protractor 会在测试结束后退出，并且不会在文件发生变化时自动重启。使用<code>npm run protractor</code>来重新执行测试。</p>\n<blockquote>\n<p>注意：在使用 Protractor 执行测试的时候必须保证应用运行在 Web 服务器下。你可以使用<code>npm start</code>启动服务器。你也必须保证在运行<code>npm run protractor</code>之前已经安装了 Protractor 并且更新了相关驱动。通过在终端中输入<code>npm install</code>和<code>npm run update-webdriver</code>来完成以上事情。</p>\n</blockquote>\n<h2 id=\"-4\">课外扩展 <a class=\"header-anchor\" href=\"#-4\" aria-hidden=\"true\">&#128279;</a></h2>\n<h3 id=\"query\">实时显示 Query 的值 <a class=\"header-anchor\" href=\"#query\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>通过给<code>index.html</code>模板添加一个<code>{{query}}</code>绑定来实时显示<code>query</code>模型的值，看看它在用户输入的时候是如何发生变化的。</p>\n<h3 id=\"query-2\">在标题中显示 Query <a class=\"header-anchor\" href=\"#query-2\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>我们来看看如何让<code>query</code>的值实时地显示在 HTML 页面标题（Title）上。</p>\n<ul>\n<li>给<code>describe</code>代码块添加一个端到端测试，现在<code>test/e2e/scenarios.js</code>长这样：</li>\n</ul>\n<pre><code>describe('PhoneCat App', function() {\n\n  describe('Phone list view', function() {\n\n    beforeEach(function() {\n      browser.get('app/index.html');\n    });\n\n    var phoneList = element.all(by.repeater('phone in phones'));\n    var query = element(by.model('query'));\n\n    it('should filter the phone list as a user types into the search box', function() {\n      expect(phoneList.count()).toBe(3);\n\n      query.sendKeys('nexus');\n      expect(phoneList.count()).toBe(1);\n\n      query.clear();\n      query.sendKeys('motorola');\n      expect(phoneList.count()).toBe(2);\n    });\n\n    it('should display the current filter value in the title bar', function() {\n      query.clear();\n      expect(browser.getTitle()).toMatch(/Google Phone Gallery:\\s*$/);\n\n      query.sendKeys('nexus');\n      expect(browser.getTitle()).toMatch(/Google Phone Gallery: nexus$/);\n    });\n  });\n});\n</code></pre>\n<p>执行 Protractor（<code>npm run protractor</code>）可以发现测试失败了。</p>\n<ul>\n<li>你可能觉得直接给<code>&lt;title&gt;</code>标签加个<code>{{query}}</code>就好了：</li>\n</ul>\n<pre><code>&lt;title&gt;Google Phone Gallery: {{query}}&lt;/title&gt;\n</code></pre>\n<p>然而，当你刷新页面的时候，你不会看到预期的结果。因为“query”模型只能活在定义在<code>&lt;body&gt;</code>标签下的<code>ng-controller=&quot;PhoneListCtrl&quot;</code>的作用域中：</p>\n<pre><code>&lt;body ng-controller=&quot;PhoneListCtrl&quot;&gt;\n</code></pre>\n<p>如果你想要把 query 模型绑定到<code>&lt;title&gt;</code>标签上去，你必须把<code>ngController</code>的声明<strong>移动</strong>到<code>&lt;html&gt;</code>标签上，因为它是<code>&lt;body&gt;</code>和<code>&lt;title&gt;</code>标签共同的祖先节点：</p>\n<pre><code>&lt;html ng-app=&quot;phonecatApp&quot; ng-controller=&quot;PhoneListCtrl&quot;&gt;\n</code></pre>\n<p>同时，记得把<code>&lt;body&gt;</code>上定义的<code>ng-controller</code>指令<strong>删除</strong>。</li></p>\n<ul>\n<li>重新执行<code>npm run protractor</code>就可以发现测试通过了</li>\n<li>当在 title 节点中使用双花括号感觉还不错的情况下，你可能会发现，在页面还处于加载中的短暂时间内它们直接地就打印到用户的浏览器中去了。使用 <a href=\"https://docs.angularjs.org/api/ng/directive/ngBind\">ngBind</a> 或者 <a href=\"https://docs.angularjs.org/api/ng/directive/ngBindTemplate\">ngBindTemplate</a> 将会是一种更好的选择，它们在页面加载的过程中不会显示任何东西：</li>\n</ul>\n<pre><code>&lt;title ng-bind-template=&quot;Google Phone Gallery: {{query}}&quot;&gt;Google Phone Gallery&lt;/title&gt;\n</code></pre>\n<h2 id=\"-5\">总结 <a class=\"header-anchor\" href=\"#-5\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>现在我们给应用添加了一个关键词搜索框并且包含了一个保证其功能正确的测试。现在我们可以前往 <a href=\"/p/angular-tutorial-two-way-data-binding/\">step 4</a> 来学习如何给手机应用添加排序功能。</p>\n","full":true}