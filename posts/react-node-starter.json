{"id":"react-node-starter","title":"React node starter","date":"2018-10-10T02:36:09.528Z","tags":["JavaScript","React","NodeJs"],"index":true,"draft":false,"html":"<!-- 「」 -->\n<p>出于某种需求搭建了一个非常简单的、基于 React / Node / Express / MongoDB 的 starter 工程：<a href=\"https://github.com/wxsms/react-node-starter\">wxsms/react-node-starter</a>，旨在简化小型或中小型项目开发流程，关注实际业务开发。</p>\n<p>目前所实现的内容有：</p>\n<ul>\n<li>前后端完全分离</li>\n<li>热重载</li>\n<li>用户注册、登录</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/5960988/46710580-0ca53f00-cc7b-11e8-8328-f49e0a14c601.png\" alt=\"\"></p>\n<p>麻雀虽小，五脏俱全。下面记录搭建过程。</p>\n<!-- more -->\n<h2 id=\"react\">React <a class=\"header-anchor\" href=\"#react\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>整个项目实际上是一个使用 <a href=\"https://github.com/facebook/create-react-app\">facebook/create-react-app</a> 创建出来的架构。</p>\n<pre><code>$ npm install create-react-app -g\n$ create-react-app react-node-starter\n</code></pre>\n<p>如此就完事了。创建出来的项目会包含 React 以及 React Scripts，Webpack 等配置都已经包含在了 React Scripts 中。执行 <code>npm start</code> 会打开 <a href=\"http://localhost:3000\">http://localhost:3000</a>，但是有一个遗憾之处是，这里提供的热重载不是 HMR，而是整个页面级别的重新加载。</p>\n<h2 id=\"node-express\">Node &amp; Express <a class=\"header-anchor\" href=\"#node-express\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>要在前端项目的基础上加入 Node 服务端，由于项目的极简性质，需要考虑一个问题是：如何在不跨域、不加入额外反代的情况下完成这个任务。有幸的是 create-react-app 贴心地加入了 <a href=\"https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#proxying-api-requests-in-development\">Proxying API Requests in Development</a> 功能，只需要给 <code>package.json</code> 加入一对键值，就可以达成目的：</p>\n<pre><code>&quot;proxy&quot;: &quot;http://localhost:3001&quot;\n</code></pre>\n<p>这样一来，在开发环境下，前端会自动将 <code>Accept</code> Header 不包含 <code>text/html</code> 的请求（即 Ajax 请求）转发到 3001 端口，那么我们只需要将服务端部署到 3001 端口就好了。</p>\n<p>至于生产环境则无此烦恼，只需要将 <code>npm run build</code> 打包出来的文件当做静态资源，服务器依旧照常启动即可。</p>\n<p>在项目根目录下新建 <code>server</code> 文件夹，用来存放服务端代码。</p>\n<p><code>server/server.js</code>:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-meta\">#!/usr/bin/env node</span>\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./app'</span>);\n<span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);\n\n<span class=\"hljs-keyword\">const</span> port = <span class=\"hljs-number\">3001</span>;\napp.set(<span class=\"hljs-string\">'port'</span>, port);\n\n<span class=\"hljs-keyword\">const</span> server = http.createServer(app);\n\nserver.listen(port);\n</code></pre>\n<p><code>server/app.js</code>:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> session = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express-session'</span>);\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n<span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'morgan'</span>);\n<span class=\"hljs-keyword\">const</span> cookieParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cookie-parser'</span>);\n<span class=\"hljs-keyword\">const</span> bodyParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'body-parser'</span>);\n\n<span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./router'</span>);\n\n<span class=\"hljs-keyword\">const</span> app = express();\n\napp.use(logger(<span class=\"hljs-string\">'dev'</span>));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({<span class=\"hljs-attr\">extended</span>: <span class=\"hljs-literal\">false</span>}));\napp.use(cookieParser());\napp.use(session({\n  <span class=\"hljs-attr\">secret</span>: <span class=\"hljs-string\">'test'</span>,\n  <span class=\"hljs-attr\">resave</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">saveUninitialized</span>: <span class=\"hljs-literal\">true</span>\n}));\napp.use(express.static(path.join(__dirname, <span class=\"hljs-string\">'../build'</span>)));\napp.use(<span class=\"hljs-string\">'/public'</span>, express.static(path.join(__dirname, <span class=\"hljs-string\">'../public'</span>)));\napp.use(<span class=\"hljs-string\">'/api'</span>, router);\napp.get(<span class=\"hljs-string\">'*'</span>, (req, res) =&gt; {\n  res.sendFile(<span class=\"hljs-string\">'build/index.html'</span>, {<span class=\"hljs-attr\">root</span>: path.join(__dirname, <span class=\"hljs-string\">'../'</span>)});\n});\n\n<span class=\"hljs-built_in\">module</span>.exports = app;\n</code></pre>\n<p>就是一个典型的 Express HTTP 服务器。当处于开发环境时，<code>build</code> 目录只存在于内存中。执行生产构建脚本后，会打包至硬盘，因此上面的代码可以同时覆盖到开发与生产环境，无需再做额外配置。</p>\n<p>准备完成后，将 <code>start</code> 脚本更新为：</p>\n<pre><code>&quot;start&quot;: &quot;concurrently \\&quot;react-scripts start\\&quot; \\&quot;nodemon server/server.js\\&quot;&quot;\n</code></pre>\n<p>即可。其中：</p>\n<ul>\n<li><a href=\"https://github.com/kimmobrunfeldt/concurrently\">concurrently</a> 是为了在一个终端窗口中同时执行前端与服务端命令</li>\n<li><a href=\"https://github.com/remy/nodemon\">nodemon</a> 是为了实现服务端热重载</li>\n</ul>\n<p>熟悉 Node.js 的应该对这两个工具都不陌生。</p>\n<p>这里有一个对原项目作出改变的地方是，出于尽可能简化的目的，将 <code>registerServiceWorker.js</code> 文件及其引用移除了，同时使用 Express 来对 <code>public</code> 文件夹做静态资源路由。</p>\n<p>如此一来，重新执行 <code>npm start</code> 会发现 Express 服务器能够按照预期运行了。</p>\n<h2 id=\"mongodb\">MongoDB <a class=\"header-anchor\" href=\"#mongodb\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>建好 Express 整体框架后，加入 MongoDB 的相关支持就非常简单了。安装 <a href=\"https://mongoosejs.com/\">mongoose</a>，然后在 <code>server</code> 目录下新建一个 <code>models</code> 文件夹用来存放 Model，然后新建一个 db 初始化文件：</p>\n<p><code>server/mongodb.js</code></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n\nmongoose.connect(<span class=\"hljs-string\">'mongodb://localhost:27017'</span>);\n\nfs.readdirSync(path.join(__dirname, <span class=\"hljs-string\">'/models'</span>)).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">file</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./models/'</span> + file);\n});\n</code></pre>\n<p>最后将此文件在 <code>app.js</code> 中引用即可：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./mongodb'</span>);\n</code></pre>\n<h2 id=\"session-auth\">Session Auth <a class=\"header-anchor\" href=\"#session-auth\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>本项目采用 Session 鉴权，那么在前后端分离的项目中，无法通过服务端模板来同步赋值，因此有一个问题就是如何让前端项目获取到当前登录的角色。出于尽可能简单的目的，最终做法是在页面入口初始化时向服务端发起请求获取当前登录角色，获取过程中显示 Loading 界面。用户信息获取成功后才开始真正的路由渲染，如果具体页面鉴权失败则重定向回登录页面。</p>\n<h2 id=\"antd\">AntD <a class=\"header-anchor\" href=\"#antd\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>前端选用 <a href=\"https://github.com/ant-design/ant-design\">Ant Design</a> 作为 UI 框架，为了更方便地使用它，参考其文档教程，这里做一点小小的配置，首先安装 <a href=\"https://github.com/timarney/react-app-rewired\">react-app-rewired</a> 与 <a href=\"https://www.npmjs.com/package/babel-plugin-import\">babel-plugin-import</a>：</p>\n<pre><code>$ yarn add react-app-rewired babel-plugin-import\n</code></pre>\n<p>修改 <code>package.json</code> 中的脚本，将 <code>react-scripts</code> 全都替换为 <code>react-app-rewired</code>：</p>\n<pre><code class=\"language-json\">{\n   <span class=\"hljs-attr\">\"scripts\"</span>: {\n     <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"concurrently \\\"react-app-rewired start\\\" \\\"nodemon server/server.js\\\"\"</span>,\n     <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"react-app-rewired build\"</span>,\n     <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"react-app-rewired test --env=jsdom\"</span>,\n     <span class=\"hljs-attr\">\"eject\"</span>: <span class=\"hljs-string\">\"react-app-rewired eject\"</span>\n   }\n}\n</code></pre>\n<p>然后在项目根目录中创建 <code>config-overrides.js</code> 文件：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> {injectBabelPlugin} = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'react-app-rewired'</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">override</span> (<span class=\"hljs-params\">config, env</span>) </span>{\n  config = injectBabelPlugin(\n    [<span class=\"hljs-string\">'import'</span>, {<span class=\"hljs-attr\">libraryName</span>: <span class=\"hljs-string\">'antd'</span>, <span class=\"hljs-attr\">libraryDirectory</span>: <span class=\"hljs-string\">'es'</span>, <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">'css'</span>}],\n    config,\n  );\n  <span class=\"hljs-keyword\">return</span> config;\n};\n</code></pre>\n<p>这样做的好处是，CSS 可以按需加载，并且引用 AntD 组件更方便了，如：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> {Button} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'antd'</span>;\n</code></pre>\n<h2 id=\"redux\">Redux <a class=\"header-anchor\" href=\"#redux\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>安装 Redux 全家桶：</p>\n<pre><code>$ yarn add redux redux-thunk react-redux immutable\n</code></pre>\n<p>然后按照 <a href=\"https://codesandbox.io/s/9on71rvnyo\">示例项目</a> 插入到项目中去即可。区别是为了在 action 中执行异步操作加入了一个中间件 <a href=\"https://github.com/reduxjs/redux-thunk\">redux-thunk</a>，以及原示例没有使用 <a href=\"https://facebook.github.io/immutable-js/\">Immutable.js</a>，也在本项目中加入了。</p>\n<p><code>src/redux/store.js</code>:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> {createStore, applyMiddleware} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'redux'</span>;\n<span class=\"hljs-keyword\">import</span> thunk <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'redux-thunk'</span>;\n<span class=\"hljs-keyword\">import</span> rootReducer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./reducers/index'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n</code></pre>\n"}