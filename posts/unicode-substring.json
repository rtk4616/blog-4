{"id":"unicode-substring","title":"Unicode substring","date":"2018-09-06T06:46:40.741Z","tags":["JavaScript"],"index":false,"draft":false,"html":"<p>最近遇到一个问题：在做字符串截取操作时，如果字符串中包含了 emoji 字符（一个表情占多个 unicode 字符），而碰巧又把它截断了，程序会出错。在 ReactNative App 下的具体表现就是崩溃。由于以前做的是网页比较多，基本没有输入表情字符的案例，而在手机上就不一样了，因此这个问题还是第一次发现。</p>\n<p>比如说：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-string\">'😋Emoji😋'</span>.substring(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// 😋</span>\n</code></pre>\n<p>因此，如果对这个字符串做 <code>substring(0, 1)</code> 操作，就会截取到一个未知字符。</p>\n<!-- more -->\n<p>中间的探索过程就不谈了，Google 了一下解决方案，以及咨询同事们以后，发现最简单的办法是通过 <code>lodash</code> 自带的 <code>toArray</code> 方法，先将它转为数组，然后将整个逻辑改为数据的截取操作，最后再转回字符串。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">safeSubStr</span> (<span class=\"hljs-params\">str, start, end</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> charArr = _.toArray(str);\n  <span class=\"hljs-keyword\">return</span> _.slice(charArr, start, end).join(<span class=\"hljs-string\">''</span>);\n}\n</code></pre>\n<p>实际上解决问题的是 <code>_.toArray</code>，它帮我们把表情字符正确地截了出来：</p>\n<pre><code class=\"language-javascript\">_.toArray(<span class=\"hljs-string\">'😋Emoji😋'</span>) <span class=\"hljs-comment\">// [\"😋\", \"E\", \"m\", \"o\", \"j\", \"i\", \"😋\"]</span>\n</code></pre>\n<p>其实我也比较好奇它是怎么做的，通过观察源码，发现了真正的解决方案：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lodash/_unicodeToArray.js</span>\n<span class=\"hljs-comment\">/** Used to compose unicode character classes. */</span>\n<span class=\"hljs-keyword\">var</span> rsAstralRange = <span class=\"hljs-string\">'\\\\ud800-\\\\udfff'</span>,\n    rsComboMarksRange = <span class=\"hljs-string\">'\\\\u0300-\\\\u036f'</span>,\n    reComboHalfMarksRange = <span class=\"hljs-string\">'\\\\ufe20-\\\\ufe2f'</span>,\n    rsComboSymbolsRange = <span class=\"hljs-string\">'\\\\u20d0-\\\\u20ff'</span>,\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = <span class=\"hljs-string\">'\\\\ufe0e\\\\ufe0f'</span>;\n\n<span class=\"hljs-comment\">/** Used to compose unicode capture groups. */</span>\n<span class=\"hljs-keyword\">var</span> rsAstral = <span class=\"hljs-string\">'['</span> + rsAstralRange + <span class=\"hljs-string\">']'</span>,\n    rsCombo = <span class=\"hljs-string\">'['</span> + rsComboRange + <span class=\"hljs-string\">']'</span>,\n    rsFitz = <span class=\"hljs-string\">'\\\\ud83c[\\\\udffb-\\\\udfff]'</span>,\n    rsModifier = <span class=\"hljs-string\">'(?:'</span> + rsCombo + <span class=\"hljs-string\">'|'</span> + rsFitz + <span class=\"hljs-string\">')'</span>,\n    rsNonAstral = <span class=\"hljs-string\">'[^'</span> + rsAstralRange + <span class=\"hljs-string\">']'</span>,\n    rsRegional = <span class=\"hljs-string\">'(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}'</span>,\n    rsSurrPair = <span class=\"hljs-string\">'[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]'</span>,\n    rsZWJ = <span class=\"hljs-string\">'\\\\u200d'</span>;\n\n<span class=\"hljs-comment\">/** Used to compose unicode regexes. */</span>\n<span class=\"hljs-keyword\">var</span> reOptMod = rsModifier + <span class=\"hljs-string\">'?'</span>,\n    rsOptVar = <span class=\"hljs-string\">'['</span> + rsVarRange + <span class=\"hljs-string\">']?'</span>,\n    rsOptJoin = <span class=\"hljs-string\">'(?:'</span> + rsZWJ + <span class=\"hljs-string\">'(?:'</span> + [rsNonAstral, rsRegional, rsSurrPair].join(<span class=\"hljs-string\">'|'</span>) + <span class=\"hljs-string\">')'</span> + rsOptVar + reOptMod + <span class=\"hljs-string\">')*'</span>,\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = <span class=\"hljs-string\">'(?:'</span> + [rsNonAstral + rsCombo + <span class=\"hljs-string\">'?'</span>, rsCombo, rsRegional, rsSurrPair, rsAstral].join(<span class=\"hljs-string\">'|'</span>) + <span class=\"hljs-string\">')'</span>;\n\n<span class=\"hljs-comment\">/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */</span>\n<span class=\"hljs-keyword\">var</span> reUnicode = <span class=\"hljs-built_in\">RegExp</span>(rsFitz + <span class=\"hljs-string\">'(?='</span> + rsFitz + <span class=\"hljs-string\">')|'</span> + rsSymbol + rsSeq, <span class=\"hljs-string\">'g'</span>);\n\n<span class=\"hljs-comment\">/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">unicodeToArray</span>(<span class=\"hljs-params\">string</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> string.match(reUnicode) || [];\n}\n\n<span class=\"hljs-built_in\">module</span>.exports = unicodeToArray;\n</code></pre>\n<p>一大堆正则就不谈了，也不知道它是从哪里找来的这些值，最后组装了一个 <code>reUnicode</code> 正则来实现 unicode 转数组。话又说回来，这么做会不会有性能问题呢？我表示比较担忧。好在项目里面需要这么做的场景不多，字符串也不长，可以如此暴力解决。如果换个场景，还真不好说。也许又需要一种更高效的解决方案了。</p>\n"}