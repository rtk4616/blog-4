{"id":"angular-tutorial-phonecat-tutorial-app","title":"Angular 教程：手机展示应用","date":"2015-12-21T09:04:01.000Z","categories":["JavaScript"],"tags":["AngularJs","NodeJs"],"html":"<p>本系列教程是<a href=\"https://docs.angularjs.org/tutorial\">AngularJs官方教程</a>（基于<a href=\"http://creativecommons.org/licenses/by/3.0/\">CC BY 3.0协议</a>发布）的个人翻译，原版权属<a href=\"https://angularjs.org/\">AngularJs官方网站</a>所有，主要用于学习与分享，如有纰漏敬请指出。转载请注明出处。 学习AngularJs的方法之一就是跟着本教程做一个完整的项目，这个项目会向你介绍一个 AngularJS Web App 应有的架构体系。项目的目的是构建一个安卓设备目录，它可以显示一个带过滤/排序功能的列表页，同时允许用户点击列表中的设备以查看其中的详细内容。就像这样：</p>\n<p><img src=\"https://raw.githubusercontent.com/wxsms/wxsms-img-holder/master/catalog_screen.png\" alt=\"\"></p>\n<p>在不使用任何原生扩展包以及插件的情况下，跟随本教程来体会 Angular 是如何让浏览器变得更聪明的：</p>\n<ul>\n<li>学习使用客户端数据绑定来创建会随着用户操作而改变的带有动态数据的视图（View）</li>\n<li>学习不使用 DOM 操作来保持视图与数据的同步</li>\n<li>学习使用 Karma 和 Protractor 测试框架</li>\n<li>学习使用依赖注入（Dependency Injection）和服务（Services）来使得 Web 设计更优雅</li>\n</ul>\n<p>本教程可以让你学会：</p>\n<ul>\n<li>在主流浏览器上创建一个 Angular 动态应用</li>\n<li>使用数据绑定让你的数据模型（Model）和视图互连</li>\n<li>使用 Karma 创建和执行单元测试</li>\n<li>使用 Protractor 创建和执行端到端测试</li>\n<li>将应用的控制逻辑从模板（Template）转移到控制器（Controller）</li>\n<li>使用 Angular Service 从服务端获取数据</li>\n<li>使用 ngAnimate 为应用添加动画效果</li>\n<li>如何寻找其它 Angular 的学习资源</li>\n</ul>\n<p>本教程将指导构读者建一个简单应用的完整过程，包括如何编写 / 执行单元 / 端到端测试。每个步骤最后的试验环节将为你提供更多的关于学习 AngularJS / 本项目的建议。 几个小时或者一天的时间就足以完成教程了。</p>\n<!--more-->\n<h2 id=\"\">起步 <a class=\"header-anchor\" href=\"#\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>本章节余下的内容会指导你完成本地开发环境的搭建，如果你只想读教程的话就可以直接进入第一步：<a href=\"/p/angular-tutorial-bootstrapping/\">Step 0 - 起步</a></p>\n<h2 id=\"-2\">使用代码 <a class=\"header-anchor\" href=\"#-2\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>本教程使用 <a href=\"http://git-scm.com/\">Git</a> 来管理源代码。</p>\n<h3 id=\"git\">安装Git <a class=\"header-anchor\" href=\"#git\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>从 <a href=\"http://git-scm.com/download\">http://git-scm.com/download</a> 下载和安装 Git，在 git 命令行界面中，将会使用到的命令有：</p>\n<ul>\n<li><code>git clone</code>：克隆一个远程代码仓库到本地机器</li>\n<li><code>git checkout ...</code>：登入 / 登出一个仓库的不同分支或标签</li>\n</ul>\n<h3 id=\"angular-phonecat\">下载 angular-phonecat <a class=\"header-anchor\" href=\"#angular-phonecat\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>用以下命令从 GitHub 下载 <a href=\"https://github.com/angular/angular-phonecat\">angular-phonecat repository</a>：</p>\n<pre><code>git clone --depth=14 https://github.com/angular/angular-phonecat.git\n</code></pre>\n<p>这条命令会在你的当前目录下创建<code>angular-phonecat</code>代码仓库。</p>\n<blockquote>\n<p><code>--depth=14</code>选项会告诉 Git 只拉取最新的14条 Commits，这会让你的下载速度快很多。</p>\n</blockquote>\n<p>把当前目录转到<code>angular-phonecat</code>：</p>\n<pre><code>cd angular-phonecat\n</code></pre>\n<p>从现在开始，如非特别说明，教程中所有的指令都是在<code>angular-phonecat</code>目录下执行的。</p>\n<h3 id=\"nodejs\">安装 Node.js <a class=\"header-anchor\" href=\"#nodejs\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>如果想要运行已经预配置好的 web 服务器和测试工具，你还需要安装 <a href=\"http://nodejs.org/\">Node.js v0.10.27+</a></p>\n<p>你可以通过 <a href=\"http://nodejs.org/download/\">http://nodejs.org/download/</a> 下载 Node.js 安装包。 使用以下命令查看安装好的 Node.js 版本：</p>\n<pre><code>node --version\n</code></pre>\n<p>在基于 Debian 的分布式系统下，存在另外一个名叫<code>node</code>的工具，这样一来名字就冲突了。推荐的解决方案是安装<code>nodejs-legacy</code>包，这个包会将我们需要的<code>node</code>重命名为<code>nodejs</code></p>\n<pre><code>apt-get install nodejs-legacy npm\nnodejs --version\nnpm --version\n</code></pre>\n<blockquote>\n<p>如果需要在本地环境下运行不同版本的 Nodejs，可以考虑安装 <a href=\"https://github.com/creationix/nvm\" title=\"Node Version Manager Github Repo link\">Node Version Manager (nvm)</a></p>\n</blockquote>\n<p>安装好 Nodejs 后，可以通过以下命令安装项目依赖：</p>\n<pre><code>npm install\n</code></pre>\n<p>这条指令会读取 angular-phonecat 目录下的<code>package.json</code>文件，并且把以下内容下载到<code>node_modules</code>目录：</p>\n<ul>\n<li><a href=\"http://bower.io/\">Bower</a> - 客户端的包管理器</li>\n<li><a href=\"https://github.com/nodeapps/http-server\">Http-Server</a> - 一个简单的本地静态 web 服务器</li>\n<li><a href=\"https://github.com/karma-runner/karma\">Karma</a> - 单元测试框架</li>\n<li><a href=\"https://github.com/angular/protractor\">Protractor</a> - 端到端（E2E）测试框架</li>\n</ul>\n<p>执行<code>npm install</code>也会自动地使用 bower 将 Angular 下载到<code>app/bower_components</code>目录。</p>\n<blockquote>\n<p>需要注意的是，angular-phonecat 项目使用 npm 脚本来安装和运行这些工具，这意味着它们在默认情况下没有被全局安装。查看下面的<strong>安装帮助工具</strong>以获得更多信息。</p>\n</blockquote>\n<p>本项目为了简化开发过程中一些无关紧要的任务，已经预设了一些 npm 脚本：</p>\n<ul>\n<li>\n<p><code>npm start</code></p>\n<ul>\n<li>启动一个本地开发服务器</li>\n</ul>\n</li>\n<li>\n<p><code>npm test</code></p>\n<ul>\n<li>启动 Karmar</li>\n</ul>\n</li>\n<li>\n<p><code>npm run protractor</code></p>\n<ul>\n<li>启动 Protractor</li>\n</ul>\n</li>\n<li>\n<p><code>npm run update-webdriver</code></p>\n<ul>\n<li>安装 Protractor 的依赖驱动</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"-3\">安装帮助工具（可选） <a class=\"header-anchor\" href=\"#-3\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>Bower，Http-Server，Karma 和 Protractor 模块同时也是可执行的工具，可以全局安装并且通过终端、命令行直接执行。在本教程中你不需要这么做，但是如果你想要直接执行它们，你可以使用<code>sudo npm install -g ...</code>全局安装这些模块。</p>\n<p>比如，使用以下命令来全局安装Bower：</p>\n<pre><code>sudo npm install -g bower\n</code></pre>\n<p>（如果在 windows 下请忽略 sudo ）</p>\n<p>然后你就可以直接执行 bower 工具了，像这样：</p>\n<pre><code>bower install\n</code></pre>\n<h3 id=\"-4\">启动开发服务器 <a class=\"header-anchor\" href=\"#-4\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>虽然本 Angular 应用是以纯客户端代码组成，并且可以使用浏览器通过点击文件系统中的页面直接打开，但我们还是需要一个 Http web 服务器，尤其是出于一些安全方面的考虑，在页面是从文件系统中直接加载的情况下，大多数主流浏览器会阻止 JavaScript 发送异步请求。 本项目使用了一个简单的静态 Web 服务器来搭载应用。使用以下命令来启动它：</p>\n<pre><code>npm start\n</code></pre>\n<p>这条命令会创建一个监听 8000 端口的本机服务器，你现在可以通过以下地址访问应用了： <a href=\"http://localhost:8000/app/index.html\">http://localhost:8000/app/index.html</a></p>\n<blockquote>\n<p>如果想要更改 Web 服务器启动的 ip 或者 port， 可以编辑<code>package.json</code>中的<code>start</code>脚本。你可以使用<code>-a</code>来设置地址，使用<code>-p</code>来设置端口号。</p>\n</blockquote>\n<h3 id=\"-5\">执行单元测试 <a class=\"header-anchor\" href=\"#-5\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>单元测试关注应用程序中细小且独立的代码块，以保证 JavaScript 代码运行的正确性。单元测试的代码存放在<code>test/unit</code>目录中。 本项目使用 <a href=\"https://github.com/karma-runner/karma\">Karma</a> 作为单元测试框架，使用以下命令启动 Karma：</p>\n<pre><code>npm test\n</code></pre>\n<p>这条命令会启动 Karma 单元测试执行器。Karma 会读取配置文件<code>test/karma.conf.js</code>，在其指导下完成：</p>\n<ul>\n<li>打开 Chrome 浏览器并且连接到 Karma</li>\n<li>在浏览器中执行所有单元测试</li>\n<li>在终端或命令行中打印测试结果</li>\n<li>监听项目下的所有 JavaScript 代码，当它们发生改变的时候重新执行单元测试</li>\n</ul>\n<p>你可以在开发过程中保持 Karma 后台运行，它会及时地告诉你修改后的代码是否通过了单元测试。</p>\n<h3 id=\"-6\">执行端到端测试 <a class=\"header-anchor\" href=\"#-6\" aria-hidden=\"true\">&#128279;</a></h3>\n<p>端到端测试通过模拟一个真正的用户与运行在浏览器上的应用程序实时交互来保证整个应用在客户端上表现与行为的正确性。 端到端测试的代码存放在<code>test/e2e</code>目录中。 本项目使用 <a href=\"https://github.com/angular/protractor\">Protractor</a> 来执行端到端测试。Protractor 为了与浏览器交互将依赖于一些驱动，你可以通过以下指令安装它们：</p>\n<pre><code>npm run update-webdriver\n</code></pre>\n<p>（运行一次就够了）</p>\n<p>因为 Protractor 通过与应用程序交互来工作，所以我们需要先启动 Web 服务器：</p>\n<pre><code>npm start\n</code></pre>\n<p>然后在另外一个终端或命令行窗口中，使用以下命令启动 Protractor 测试脚本：</p>\n<pre><code>npm run protractor\n</code></pre>\n<p>Protractor 会读取配置文件<code>test/protractor-conf.js</code>，在其指导下完成：</p>\n<ul>\n<li>打开 Chrome 浏览器并连接到应用程序</li>\n<li>在浏览器中执行所有的端到端测试</li>\n<li>在终端或命令行中打印测试结果</li>\n<li>关闭浏览器并退出</li>\n</ul>\n<p>当你对 HTML 视图做出改动或者想要测试整个应用程序是否运行正常的时候，最好是执行一次端到端测试。在提交代码前执行此类测试是一种普遍的做法。</p>\n<p>现在你已经在本地机器上搭好了环境，我们可以从头开始本教程了：<a href=\"/p/angular-tutorial-bootstrapping/\">Step 0 - 起步</a></p>\n"}