{"id":"d3-note-enter-update-and-exit","title":"D3 Note - Enter, Update and Exit","date":"2016-11-10T11:43:10.000Z","categories":["JavaScript"],"tags":["D3"],"html":"<p>在 D3 的使用过程中，我们见得最多的应当是类似如下的代码：</p>\n<pre><code>let div = d3.select('body')\n  .selectAll('p')\n  .data([3, 6, 9, 12, 15])\n  .enter()\n  .append('p')\n  .text(d =&gt; d);\n</code></pre>\n<p>将得到：</p>\n<pre><code>&lt;body&gt;\n&lt;p&gt;3&lt;/p&gt;\n&lt;p&gt;6&lt;/p&gt;\n&lt;p&gt;9&lt;/p&gt;\n&lt;p&gt;12&lt;/p&gt;\n&lt;p&gt;15&lt;/p&gt;\n&lt;/body&gt;\n</code></pre>\n<p>光看代码完全不能理解 D3 到底做了些什么，其实这里关键是 <code>enter</code> 的使用。</p>\n<!--more-->\n<h2 id=\"overall\">Overall <a class=\"header-anchor\" href=\"#overall\" aria-hidden=\"true\">&#128279;</a></h2>\n<p><code>enter</code> 其实是一个选择集（selection），与其对应的还有 <code>update</code> 与 <code>exit</code>，选择集中的元素由原始选择集与绑定的数据决定。</p>\n<p><img src=\"https://raw.githubusercontent.com/wxsms/wxsms-img-holder/master/4-4-81.png\" alt=\"\"></p>\n<h2 id=\"selectionenter\">selection.enter <a class=\"header-anchor\" href=\"#selectionenter\" aria-hidden=\"true\">&#128279;</a></h2>\n<blockquote>\n<p>Returns the enter selection: placeholder nodes for each datum that had no corresponding DOM element in the selection. The enter selection is determined by selection.data, and is empty on a selection that is not joined to data.</p>\n<p>The enter selection is typically used to create “missing” elements corresponding to new data.</p>\n</blockquote>\n<p>简述就是，<code>enter</code> 会根据现有 selection 与绑定的数据量，自动“补齐”所缺失的元素。</p>\n<p>比如，例子中，如果 <code>.selectAll('p')</code> 返回的 selection 中包含 3 个元素，那么因为 data 的长度为 5，<code>enter</code> 就会补齐缺失的 2 个元素，并返回包含这三个补齐元素的 selection，接下来的操作，就是针对这个 selection 进行的。</p>\n<p>因此，在进行 <code>enter</code> 操作时，一般会事先把相关现有元素尽数清除，以免出现漏操作的情况。</p>\n<p>至于再对 <code>enter</code> 选择集进行 <code>append</code> 操作时为什么会追加到 body 节点上去，这里就涉及到另一个概念：<code>selection.update</code></p>\n<h2 id=\"selectionupdate\">selection.update <a class=\"header-anchor\" href=\"#selectionupdate\" aria-hidden=\"true\">&#128279;</a></h2>\n<p>理解了 <code>enter</code>，<code>update</code> 就很简单了，顾名思义，所指就是已有的，能够与绑定 data 一一对应上的元素的选择集。</p>\n<p>因此，实际上并没有 <code>selection.update</code> 这个方法，因为没有必要，当前选到的就是 <code>update</code> 集了。</p>\n<p>至于为什么例子中的 <code>enter</code> 集能够追加到 <code>body</code> 中去，根据 D3 文档：</p>\n<blockquote>\n<p>If the specified type is a string, appends a new element of this type (tag name) as the last child of each selected element, or the next following sibling in the update selection if this is an enter selection.</p>\n</blockquote>\n<p>当进行 <code>selection.append</code> 操作时，如果 selection 是一个 <code>enter</code> 集，那么 <code>append</code> 就会向相应 <code>update</code> 集的末尾追加。那么，自然，如果 <code>update</code> 集为空，就会往父元素内追加。</p>\n<h2 id=\"selectionexit\">selection.exit <a class=\"header-anchor\" href=\"#selectionexit\" aria-hidden=\"true\">&#128279;</a></h2>\n<blockquote>\n<p>Returns the exit selection: existing DOM elements in the selection for which no new datum was found.</p>\n</blockquote>\n<p>对于已有 DOM 元素但没有 data 与之绑定的集合，使用 <code>selection.exit</code> 来获取。</p>\n<p>如果集合没有绑定 data，则返回空集合。如果多次调用 <code>exit</code>，之后的 <code>exit</code> 会返回空集合。</p>\n<p>通常，对于 <code>exit</code> 集的操作，都是 <code>remove</code>：</p>\n<pre><code>selection.exit().remove()\n</code></pre>\n<p> </p>\n"}